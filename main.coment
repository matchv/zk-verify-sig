package main

import (
	crand "crypto/rand"
	"ed25519/src/Circuito"
	curve_ed25519 "ed25519/src/curve_ed25519"
	"fmt"
	"math/big"
	"time"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/r1cs"
	"github.com/consensys/gnark/profile"
	"github.com/consensys/gnark/std/math/uints"
	sha3 "golang.org/x/crypto/sha3"
)

func Profiler1() {
	name := "NVAL = 1"
	fmt.Println("Start : ", name)
	p := profile.Start()
	startCompilation := time.Now()
	cs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &Circuito.Circuit{})
	pk, vk, _ := groth16.Setup(cs)
	compilationTime := time.Since(startCompilation)
	fmt.Println("Compilation time: ", compilationTime)
	p.Stop()

	var tR [1]curve_ed25519PointCircuit
	var tS [1]curve_ed25519ElementO     //frontend.Variable
	var tA [1]curve_ed25519PointCircuit //td.Point
	//var tMsg [NVAL]curve_ed25519ElementF   // frontend.Variable
	var tMsg [1][Circuito.MLAR]uints.U8

	for nv := 0; nv < 1; nv++ {
		sk, _ := crand.Int(crand.Reader, curve_ed25519Q)
		var m [32]byte
		crand.Read(m[:])
		for i := 0; i < 32; i++ {
			tMsg[nv][i] = uints.NewU8(m[i])
		}
		sha512 := sha3.New512()
		sha512.Write(sk.Bytes())
		H := sha512.Sum(nil)
		s := new(big.Int).SetBytes(H[0:32])
		A := curve_ed25519IntToPoint(s)
		tA[nv] = curve_ed25519PointToCircuit(A)

		prefix := H[32:64]
		sha512.Reset()
		sha512.Write(prefix)
		sha512.Write(m[:])
		//sha512.Write(m.FillBytes(make([]byte, 32)))
		r := new(big.Int).SetBytes(sha512.Sum(nil))
		r = r.Mul(r, big.NewInt(8))
		r = r.Mod(r, curve_ed25519Ord)

		R := curve_ed25519IntToPoint(r)
		tR[nv] = curve_ed25519PointToCircuit(R)

		sha512.Reset()
		sha512.Write(R.Bytes())
		sha512.Write(A.Bytes())
		sha512.Write(m[:])
		k := new(big.Int).SetBytes(sha512.Sum(nil))
		k = k.Mod(k, curve_ed25519Ord)
		S := big.NewInt(0).Add(big.NewInt(0).Mul(k, s), r)
		S.Mod(S, curve_ed25519Ord)
		tS[nv] = curve_ed25519BigIntToElementO(S)
	}
	asignacion := Circuito.Circuit{
		A:   tA,
		R:   tR,
		S:   tS,
		Msg: tMsg,
	}
	fmt.Println("Constrains: ", p.NbConstraints())

	startProof := time.Now()
	witness, _ := frontend.NewWitness(&asignacion, ecc.BN254.ScalarField())
	proof, _ := groth16.Prove(cs, pk, witness)
	timeProof := time.Since(startProof)
	fmt.Println("Proof time: ", timeProof)

	startVerify := time.Now()
	pubWitness, _ := witness.Public()
	err := groth16.Verify(proof, vk, pubWitness)
	timeVerify := time.Since(startVerify)
	fmt.Println("Verify time: ", timeVerify)

	fmt.Println("End : ", name)
	if err != nil {
		panic("error")
	}
}

func Profiler16() {
	name := "NVAL = 16"
	fmt.Println("Start : ", name)
	p := profile.Start()
	startCompilation := time.Now()
	cs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &Circuito.Circuit16{})
	pk, vk, _ := groth16.Setup(cs)
	compilationTime := time.Since(startCompilation)
	fmt.Println("Compilation time: ", compilationTime)
	p.Stop()

	var tR [16]curve_ed25519PointCircuit
	var tS [16]curve_ed25519ElementO     //frontend.Variable
	var tA [16]curve_ed25519PointCircuit //td.Point
	//var tMsg [NVAL]curve_ed25519ElementF   // frontend.Variable
	var tMsg [16][Circuito.MLAR]uints.U8

	for nv := 0; nv < 16; nv++ {
		sk, _ := crand.Int(crand.Reader, curve_ed25519Q)
		var m [Circuito.MLAR]byte
		crand.Read(m[:])
		for i := 0; i < Circuito.MLAR; i++ {
			tMsg[nv][i] = uints.NewU8(m[i])
		}
		sha512 := sha3.New512()
		sha512.Write(sk.Bytes())
		H := sha512.Sum(nil)
		s := new(big.Int).SetBytes(H[0:32])
		A := curve_ed25519IntToPoint(s)
		tA[nv] = curve_ed25519PointToCircuit(A)

		prefix := H[32:64]
		sha512.Reset()
		sha512.Write(prefix)
		sha512.Write(m[:])
		//sha512.Write(m.FillBytes(make([]byte, 32)))
		r := new(big.Int).SetBytes(sha512.Sum(nil))
		r = r.Mul(r, big.NewInt(8))
		r = r.Mod(r, curve_ed25519Ord)

		R := curve_ed25519IntToPoint(r)
		tR[nv] = curve_ed25519PointToCircuit(R)

		sha512.Reset()
		sha512.Write(R.Bytes())
		sha512.Write(A.Bytes())
		sha512.Write(m[:])
		k := new(big.Int).SetBytes(sha512.Sum(nil))
		k = k.Mod(k, curve_ed25519Ord)
		S := big.NewInt(0).Add(big.NewInt(0).Mul(k, s), r)
		S.Mod(S, curve_ed25519Ord)
		tS[nv] = curve_ed25519BigIntToElementO(S)
	}
	asignacion := Circuito.Circuit16{
		A:   tA,
		R:   tR,
		S:   tS,
		Msg: tMsg,
	}
	fmt.Println("Constrains: ", p.NbConstraints())

	startProof := time.Now()
	witness, _ := frontend.NewWitness(&asignacion, ecc.BN254.ScalarField())
	proof, _ := groth16.Prove(cs, pk, witness)
	timeProof := time.Since(startProof)
	fmt.Println("Proof time: ", timeProof)

	startVerify := time.Now()
	pubWitness, _ := witness.Public()
	err := groth16.Verify(proof, vk, pubWitness)
	timeVerify := time.Since(startVerify)
	fmt.Println("Verify time: ", timeVerify)

	fmt.Println("End : ", name)
	if err != nil {
		panic("error")
	}
}

func Profiler32() {
	name := "NVAL = 32"
	fmt.Println("Start : ", name)
	p := profile.Start()
	startCompilation := time.Now()
	cs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &Circuito.Circuit32{})
	pk, vk, _ := groth16.Setup(cs)
	compilationTime := time.Since(startCompilation)
	fmt.Println("Compilation time: ", compilationTime)
	p.Stop()

	var tR [32]curve_ed25519PointCircuit
	var tS [32]curve_ed25519ElementO     //frontend.Variable
	var tA [32]curve_ed25519PointCircuit //td.Point
	//var tMsg [NVAL]curve_ed25519ElementF   // frontend.Variable
	var tMsg [32][32]uints.U8

	for nv := 0; nv < 32; nv++ {
		sk, _ := crand.Int(crand.Reader, curve_ed25519Q)
		var m [32]byte
		crand.Read(m[:])
		for i := 0; i < 32; i++ {
			tMsg[nv][i] = uints.NewU8(m[i])
		}
		sha512 := sha3.New512()
		sha512.Write(sk.Bytes())
		H := sha512.Sum(nil)
		s := new(big.Int).SetBytes(H[0:32])
		A := curve_ed25519IntToPoint(s)
		tA[nv] = curve_ed25519PointToCircuit(A)

		prefix := H[32:64]
		sha512.Reset()
		sha512.Write(prefix)
		sha512.Write(m[:])
		//sha512.Write(m.FillBytes(make([]byte, 32)))
		r := new(big.Int).SetBytes(sha512.Sum(nil))
		r = r.Mul(r, big.NewInt(8))
		r = r.Mod(r, curve_ed25519Ord)

		R := curve_ed25519IntToPoint(r)
		tR[nv] = curve_ed25519PointToCircuit(R)

		sha512.Reset()
		sha512.Write(R.Bytes())
		sha512.Write(A.Bytes())
		sha512.Write(m[:])
		k := new(big.Int).SetBytes(sha512.Sum(nil))
		k = k.Mod(k, curve_ed25519Ord)
		S := big.NewInt(0).Add(big.NewInt(0).Mul(k, s), r)
		S.Mod(S, curve_ed25519Ord)
		tS[nv] = curve_ed25519BigIntToElementO(S)
	}
	asignacion := Circuito.Circuit32{
		A:   tA,
		R:   tR,
		S:   tS,
		Msg: tMsg,
	}
	fmt.Println("Constrains: ", p.NbConstraints())

	startProof := time.Now()
	witness, _ := frontend.NewWitness(&asignacion, ecc.BN254.ScalarField())
	proof, _ := groth16.Prove(cs, pk, witness)
	timeProof := time.Since(startProof)
	fmt.Println("Proof time: ", timeProof)

	startVerify := time.Now()
	pubWitness, _ := witness.Public()
	err := groth16.Verify(proof, vk, pubWitness)
	timeVerify := time.Since(startVerify)
	fmt.Println("Verify time: ", timeVerify)

	fmt.Println("End : ", name)
	if err != nil {
		panic("error")
	}
}

func Profiler48() {
	name := "NVAL = 48"
	fmt.Println("Start : ", name)
	p := profile.Start()
	startCompilation := time.Now()
	cs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &Circuito.Circuit48{})
	pk, vk, _ := groth16.Setup(cs)
	compilationTime := time.Since(startCompilation)
	fmt.Println("Compilation time: ", compilationTime)
	p.Stop()

	var tR [48]curve_ed25519PointCircuit
	var tS [48]curve_ed25519ElementO     //frontend.Variable
	var tA [48]curve_ed25519PointCircuit //td.Point
	//var tMsg [NVAL]curve_ed25519ElementF   // frontend.Variable
	var tMsg [48][32]uints.U8

	for nv := 0; nv < 48; nv++ {
		sk, _ := crand.Int(crand.Reader, curve_ed25519Q)
		var m [32]byte
		crand.Read(m[:])
		for i := 0; i < 32; i++ {
			tMsg[nv][i] = uints.NewU8(m[i])
		}
		sha512 := sha3.New512()
		sha512.Write(sk.Bytes())
		H := sha512.Sum(nil)
		s := new(big.Int).SetBytes(H[0:32])
		A := curve_ed25519IntToPoint(s)
		tA[nv] = curve_ed25519PointToCircuit(A)

		prefix := H[32:64]
		sha512.Reset()
		sha512.Write(prefix)
		sha512.Write(m[:])
		//sha512.Write(m.FillBytes(make([]byte, 32)))
		r := new(big.Int).SetBytes(sha512.Sum(nil))
		r = r.Mul(r, big.NewInt(8))
		r = r.Mod(r, curve_ed25519Ord)

		R := curve_ed25519IntToPoint(r)
		tR[nv] = curve_ed25519PointToCircuit(R)

		sha512.Reset()
		sha512.Write(R.Bytes())
		sha512.Write(A.Bytes())
		sha512.Write(m[:])
		k := new(big.Int).SetBytes(sha512.Sum(nil))
		k = k.Mod(k, curve_ed25519Ord)
		S := big.NewInt(0).Add(big.NewInt(0).Mul(k, s), r)
		S.Mod(S, curve_ed25519Ord)
		tS[nv] = curve_ed25519BigIntToElementO(S)
	}
	asignacion := Circuito.Circuit48{
		A:   tA,
		R:   tR,
		S:   tS,
		Msg: tMsg,
	}
	fmt.Println("Constrains: ", p.NbConstraints())

	startProof := time.Now()
	witness, _ := frontend.NewWitness(&asignacion, ecc.BN254.ScalarField())
	proof, _ := groth16.Prove(cs, pk, witness)
	timeProof := time.Since(startProof)
	fmt.Println("Proof time: ", timeProof)

	startVerify := time.Now()
	pubWitness, _ := witness.Public()
	err := groth16.Verify(proof, vk, pubWitness)
	timeVerify := time.Since(startVerify)
	fmt.Println("Verify time: ", timeVerify)

	fmt.Println("End : ", name)
	if err != nil {
		panic("error")
	}
}

func Profiler64() {
	name := "NVAL = 64"
	fmt.Println("Start : ", name)
	p := profile.Start()
	startCompilation := time.Now()
	cs, _ := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &Circuito.Circuit64{})
	pk, vk, _ := groth16.Setup(cs)
	compilationTime := time.Since(startCompilation)
	fmt.Println("Compilation time: ", compilationTime)
	p.Stop()

	var tR [64]curve_ed25519PointCircuit
	var tS [64]curve_ed25519ElementO     //frontend.Variable
	var tA [64]curve_ed25519PointCircuit //td.Point
	//var tMsg [NVAL]curve_ed25519ElementF   // frontend.Variable
	var tMsg [64][32]uints.U8

	for nv := 0; nv < 64; nv++ {
		sk, _ := crand.Int(crand.Reader, curve_ed25519Q)
		var m [32]byte
		crand.Read(m[:])
		for i := 0; i < 32; i++ {
			tMsg[nv][i] = uints.NewU8(m[i])
		}
		sha512 := sha3.New512()
		sha512.Write(sk.Bytes())
		H := sha512.Sum(nil)
		s := new(big.Int).SetBytes(H[0:32])
		A := curve_ed25519IntToPoint(s)
		tA[nv] = curve_ed25519PointToCircuit(A)

		prefix := H[32:64]
		sha512.Reset()
		sha512.Write(prefix)
		sha512.Write(m[:])
		//sha512.Write(m.FillBytes(make([]byte, 32)))
		r := new(big.Int).SetBytes(sha512.Sum(nil))
		r = r.Mul(r, big.NewInt(8))
		r = r.Mod(r, curve_ed25519Ord)

		R := curve_ed25519IntToPoint(r)
		tR[nv] = curve_ed25519PointToCircuit(R)

		sha512.Reset()
		sha512.Write(R.Bytes())
		sha512.Write(A.Bytes())
		sha512.Write(m[:])
		k := new(big.Int).SetBytes(sha512.Sum(nil))
		k = k.Mod(k, curve_ed25519Ord)
		S := big.NewInt(0).Add(big.NewInt(0).Mul(k, s), r)
		S.Mod(S, curve_ed25519Ord)
		tS[nv] = curve_ed25519BigIntToElementO(S)
	}
	asignacion := Circuito.Circuit64{
		A:   tA,
		R:   tR,
		S:   tS,
		Msg: tMsg,
	}
	fmt.Println("Constrains: ", p.NbConstraints())

	startProof := time.Now()
	witness, _ := frontend.NewWitness(&asignacion, ecc.BN254.ScalarField())
	proof, _ := groth16.Prove(cs, pk, witness)
	timeProof := time.Since(startProof)
	fmt.Println("Proof time: ", timeProof)

	startVerify := time.Now()
	pubWitness, _ := witness.Public()
	err := groth16.Verify(proof, vk, pubWitness)
	timeVerify := time.Since(startVerify)
	fmt.Println("Verify time: ", timeVerify)

	fmt.Println("End : ", name)
	if err != nil {
		panic("error")
	}
}

func main() {

	// default options generate gnark.pprof in current dir
	// use pprof as usual (go tool pprof -http=:8080 gnark.pprof) to read the profile file
	// overlapping profiles are allowed (define profiles inside Define or subfunction to profile
	// part of the circuit only)
	Profiler1()
	/*Profiler("NVAL = 16", &Circuito.Circuit16{})
	Profiler("NVAL = 32", &Circuito.Circuit32{})
	Profiler("NVAL = 48", &Circuito.Circuit48{})
	Profiler("NVAL = 64", &Circuito.Circuit64{})*/

	/*p := profile.Start()
	_, _ = frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &Circuito.Circuit{})
	p.Stop()

	fmt.Println(p.NbConstraints())*/
	//fmt.Println(p.Top())
	// Output:
	// 2
	// Showing nodes accounting for 2, 100% of 2 total
	//       flat  flat%   sum%        cum   cum%
	//          1 50.00% 50.00%          2   100%  profile_test.(*Circuit).Define profile/profile_test.go:17
	//          1 50.00%   100%          1 50.00%  r1cs.(*r1cs).AssertIsEqual frontend/cs/r1cs/api_assertions.go:37
}
