
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/// @title Groth16 verifier template.
/// @author Remco Bloemen
/// @notice Supports verifying Groth16 proofs. Proofs can be in uncompressed
/// (256 bytes) and compressed (128 bytes) format. A view function is provided
/// to compress proofs.
/// @notice See <https://2π.com/23/bn254-compression> for further explanation.
contract Verifier {
    
    /// Some of the provided public input values are larger than the field modulus.
    /// @dev Public input elements are not automatically reduced, as this is can be
    /// a dangerous source of bugs.
    error PublicInputNotInField();

    /// The proof is invalid.
    /// @dev This can mean that provided Groth16 proof points are not on their
    /// curves, that pairing equation fails, or that the proof is not for the
    /// provided public input.
    error ProofInvalid();

    // Addresses of precompiles
    uint256 constant PRECOMPILE_MODEXP = 0x05;
    uint256 constant PRECOMPILE_ADD = 0x06;
    uint256 constant PRECOMPILE_MUL = 0x07;
    uint256 constant PRECOMPILE_VERIFY = 0x08;

    // Base field Fp order P and scalar field Fr order R.
    // For BN254 these are computed as follows:
    //     t = 4965661367192848881
    //     P = 36⋅t⁴ + 36⋅t³ + 24⋅t² + 6⋅t + 1
    //     R = 36⋅t⁴ + 36⋅t³ + 18⋅t² + 6⋅t + 1
    uint256 constant P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
    uint256 constant R = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;

    // Extension field Fp2 = Fp[i] / (i² + 1)
    // Note: This is the complex extension field of Fp with i² = -1.
    //       Values in Fp2 are represented as a pair of Fp elements (a₀, a₁) as a₀ + a₁⋅i.
    // Note: The order of Fp2 elements is *opposite* that of the pairing contract, which
    //       expects Fp2 elements in order (a₁, a₀). This is also the order in which
    //       Fp2 elements are encoded in the public interface as this became convention.

    // Constants in Fp
    uint256 constant FRACTION_1_2_FP = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4;
    uint256 constant FRACTION_27_82_FP = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;
    uint256 constant FRACTION_3_82_FP = 0x2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775;

    // Exponents for inversions and square roots mod P
    uint256 constant EXP_INVERSE_FP = 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD45; // P - 2
    uint256 constant EXP_SQRT_FP = 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52; // (P + 1) / 4;

    // Groth16 alpha point in G1
    uint256 constant ALPHA_X = 17029237698047675981056466760104592935604207718843419639931042817262961789726;
    uint256 constant ALPHA_Y = 21210754319247447094541756618214186931909552402055349044477409012178332554592;

    // Groth16 beta point in G2 in powers of i
    uint256 constant BETA_NEG_X_0 = 10834212098332168089482642162952580281862094661547220622210785570708164355845;
    uint256 constant BETA_NEG_X_1 = 1612329155649403361133571558209599180510183344421615468358420289320060291817;
    uint256 constant BETA_NEG_Y_0 = 19149702749485287819578427547173397415754871900727535883752711367187236424311;
    uint256 constant BETA_NEG_Y_1 = 10101578853557414767499674685231691607518512145627893645429866530039666193413;

    // Groth16 gamma point in G2 in powers of i
    uint256 constant GAMMA_NEG_X_0 = 11132763853236471401425927660933093777276447335593751324413135261608519435111;
    uint256 constant GAMMA_NEG_X_1 = 4411448548793324425936242923906219693280468183168333949032907314456475473317;
    uint256 constant GAMMA_NEG_Y_0 = 13401166702676315469550855361656217866244112576014077743289028759905013625940;
    uint256 constant GAMMA_NEG_Y_1 = 7656400452537582375599946792781828838181058000872820923370607630862493255670;

    // Groth16 delta point in G2 in powers of i
    uint256 constant DELTA_NEG_X_0 = 17874817810911490705957269199219269535544533244097736196063422191919463295587;
    uint256 constant DELTA_NEG_X_1 = 9776164366682643448112399258910975687868358869641856796763165391043228461118;
    uint256 constant DELTA_NEG_Y_0 = 5985540219676792366982527275629080676608477929888672457769544236629061216733;
    uint256 constant DELTA_NEG_Y_1 = 14696120744648611503445200866878562412563799665004241349920505664151424496717;

    // Constant and public input points
    uint256 constant CONSTANT_X = 16446589219827757457721109986250406596950806414785638042526079766327997029929;
    uint256 constant CONSTANT_Y = 9286510401786539683526026831209110899175435656545805848467859614695245159087;
    uint256 constant PUB_0_X = 7087922694719944467417677626063076738192009664150900986570436617500093971979;
    uint256 constant PUB_0_Y = 6244788912168477308577115750504458968120581113520144550094473279378124148264;
    uint256 constant PUB_1_X = 16360182135564695305019114332462493009771023729217205446976470572610292087196;
    uint256 constant PUB_1_Y = 5230263829306534770162274354936490050316961510806551460203739508972935732119;
    uint256 constant PUB_2_X = 17771419243135076825120335277753355247874816943519020439845645563603436468022;
    uint256 constant PUB_2_Y = 21331206261026837998916905014737176422318249293665584521248145999475686575455;
    uint256 constant PUB_3_X = 3728960044698088373720353550716940557984973511139468360288158900499687872346;
    uint256 constant PUB_3_Y = 11385481409334828964697229212970613521510096723722013138553670181211189789566;
    uint256 constant PUB_4_X = 9588750245277564526557517022474974572558846785292957814390301644799142322566;
    uint256 constant PUB_4_Y = 4654989655578905104514450187494387428312933586486538711746228190529161542618;
    uint256 constant PUB_5_X = 12536349050815063282284180821528605265232622630618621872858819428274715601373;
    uint256 constant PUB_5_Y = 12138561097663837205459756579280845341121402197889674119693450018661090986226;
    uint256 constant PUB_6_X = 5927009126984839229505518042073761467618852978876276600030612558213018122162;
    uint256 constant PUB_6_Y = 20456224129618637600755522577182308531355509938684123009260212638888283402488;
    uint256 constant PUB_7_X = 10138785268919370285054399474766424365702997233070213805697863583905597489714;
    uint256 constant PUB_7_Y = 17437423781813590620833649303926617977285040928588156246580514510424272421397;
    uint256 constant PUB_8_X = 19757014937225223208953500528968099643231703263900290598207817072890647609638;
    uint256 constant PUB_8_Y = 2117669687587114343697343830355353981199318215013526397659975137910727880437;
    uint256 constant PUB_9_X = 14752237683536047986520005987215843716784827056911585670734933831433015252663;
    uint256 constant PUB_9_Y = 16050238009967365746322808845000530528752411278898843524022220485513682650044;
    uint256 constant PUB_10_X = 13003818077958152786173524295858288194280142457284028022521316407530411689153;
    uint256 constant PUB_10_Y = 7171808538079374569708040234435170832899736560410466819848295515911780642935;
    uint256 constant PUB_11_X = 2400300396750749415444144353153208485610525936973428110779030014222245993334;
    uint256 constant PUB_11_Y = 18162553558637548781509670620134067616532098080953836136569628019582316400800;
    uint256 constant PUB_12_X = 9824956220603278797025647132052290587733632348277922055588646913243090199359;
    uint256 constant PUB_12_Y = 1451851275324525807405486060506382295922755334873238162918863880496793146854;
    uint256 constant PUB_13_X = 9121661635466594014826577662977907316086227997577840536610818366333108523658;
    uint256 constant PUB_13_Y = 12025402423260247843434488799190674511285290960184556036873460223353620236187;
    uint256 constant PUB_14_X = 7600304469468206379420141045632696480891620683926065827377317244207606983392;
    uint256 constant PUB_14_Y = 15668618468004983888724460909912332266490620995252767444881341283325798587819;
    uint256 constant PUB_15_X = 17366289077401242251975928555576304162840510670675171885315908388810069855432;
    uint256 constant PUB_15_Y = 8701047741210020979673219455753683058405064871992845814921602012379949778884;
    uint256 constant PUB_16_X = 19385406119277637391303335478209355644868551614429468158814736929353263908157;
    uint256 constant PUB_16_Y = 3446233965673843197365169478385014520104929751668683839359241217704218227155;
    uint256 constant PUB_17_X = 10945304496742325451203901629070218228266484567429768615852257784906400464325;
    uint256 constant PUB_17_Y = 5638838318035464700939371202715790481747120674573246013173238169238242367738;
    uint256 constant PUB_18_X = 10093164276098881711492727245118329907929411817651582252488056715506897696542;
    uint256 constant PUB_18_Y = 5164755488482643428906397441110885291339331519410259923310738362723024025725;
    uint256 constant PUB_19_X = 4777755024819457701669475630530233311932229816212583550979458462760980589531;
    uint256 constant PUB_19_Y = 9938470136206883231623128119917205075973098106954652811622556451369718711085;
    uint256 constant PUB_20_X = 8964893364370118922499999273723448495550650512005375706559684076895000103376;
    uint256 constant PUB_20_Y = 9666820585759226808654601843320547474820841499135857868713084706246138663549;
    uint256 constant PUB_21_X = 6620441052415632366309789256334001040337720301035137031592274876552112003351;
    uint256 constant PUB_21_Y = 6163220230153769386755237733001686710965675481907252389975337478681729020573;
    uint256 constant PUB_22_X = 2196656671655594761052170659895887231081577821234953325110018759350357030029;
    uint256 constant PUB_22_Y = 3050820763347423141982219656904209473727443250584627385980717797325548002967;
    uint256 constant PUB_23_X = 16676542984398524961283183767946004601508999986186421378618110409171244256;
    uint256 constant PUB_23_Y = 15011526942247976660783874263555070395429528212528818373228482637560130512821;
    uint256 constant PUB_24_X = 16537506256456164179596604823235324326517775775816142511857620409956371149586;
    uint256 constant PUB_24_Y = 20827964731321259648851427715213671889013590612352648369269255028073036812366;
    uint256 constant PUB_25_X = 17014191058975345753640053230830331290329923311152871718297995333845220052472;
    uint256 constant PUB_25_Y = 8365986739892392732612957957235265436203429141181074437606135597408435352196;
    uint256 constant PUB_26_X = 4021522665151992053629040422628161394216898089478858433304444907192082703290;
    uint256 constant PUB_26_Y = 12920217467312277465919582420239631818046678837286448238553160603071149885247;
    uint256 constant PUB_27_X = 15914834288453927741275385759059343555165552231499974340854817252030579579468;
    uint256 constant PUB_27_Y = 20500707820086338058658038954285603781944310465422262546786066496893103279140;
    uint256 constant PUB_28_X = 3405976056091107366419121592193342607233529795208947080923067247169286144617;
    uint256 constant PUB_28_Y = 4889302708790017391501552416903946334113705603345058067842549586142861113096;
    uint256 constant PUB_29_X = 2360670537542148771938601000223179409820508510046065182409015671880714106604;
    uint256 constant PUB_29_Y = 21861438016726619020962432846776113926142554894297924356239520502826577023359;
    uint256 constant PUB_30_X = 9931443417370554615124077431661624446250575629870672256864650770169593054905;
    uint256 constant PUB_30_Y = 14424307890136630081674378120532036843960911888845218289093840466807144516273;
    uint256 constant PUB_31_X = 19893552587856340871734577804480756970389803225100963065466952279697268916593;
    uint256 constant PUB_31_Y = 17162344189012468555102093286314669866204749606304576116594189835042505631359;
    uint256 constant PUB_32_X = 15389088579477947810086260680627770034287907638862493029463446636290815153396;
    uint256 constant PUB_32_Y = 3483727332322484259230210647023570804253798183830551514622418646276831520284;
    uint256 constant PUB_33_X = 15670070853211106295319773295605763979210507936049469986936188196939135508027;
    uint256 constant PUB_33_Y = 13202073127635713123181982380433933503645872958974445509794642590862811980997;
    uint256 constant PUB_34_X = 13688894419790648326200756045776667297285956782792647916547343454076088471739;
    uint256 constant PUB_34_Y = 11009322214367863921609942171973021834821545684185428213672367875689264008875;
    uint256 constant PUB_35_X = 7262669536350215257610472786848075232025396126911627099743048921796323604603;
    uint256 constant PUB_35_Y = 5561515945759269149352951798114740990244877773643216775043667970840717206309;
    uint256 constant PUB_36_X = 2613263980898900657731884831133746494732257429211318119598224333634017520811;
    uint256 constant PUB_36_Y = 10192730948282378985298384616795778877774292441140694839973575818068510987012;
    uint256 constant PUB_37_X = 11799969240134665667220957504368522194988438740321089089707336142702684189182;
    uint256 constant PUB_37_Y = 7020009312317979634519805088145398177935326451556190195261204983567961112210;
    uint256 constant PUB_38_X = 5024293976313025313960808429052930910251163855227705245883361046289501628506;
    uint256 constant PUB_38_Y = 19265306715841896887910839658087967063069445336382722887183770207854010989729;
    uint256 constant PUB_39_X = 12781183635113756041240433171522811964943788097153189699267031753364262825155;
    uint256 constant PUB_39_Y = 16005869682782094918414894463119063777690721812375077958770874089290774200949;
    uint256 constant PUB_40_X = 20076995516471380372105320912459273846211966884120593662814862681270698677422;
    uint256 constant PUB_40_Y = 2947683542151181156919100357859213794754684697303020166429295791340723401985;
    uint256 constant PUB_41_X = 18761300694362238121252114870662323808023269668541161811930677096337010770203;
    uint256 constant PUB_41_Y = 4366796887941581696302960266493981991268078056057256833952186887884185702018;
    uint256 constant PUB_42_X = 1802556054365367353413102167616873279070107721973628296500596033221700546591;
    uint256 constant PUB_42_Y = 16643108282195377854247323507463032066340033543177168628266790275239221071586;
    uint256 constant PUB_43_X = 219284927766414296853994779189141165956143584009487008396949681992774658882;
    uint256 constant PUB_43_Y = 20641776607420424222534344947710698647251709580625501076865597734108939397754;
    uint256 constant PUB_44_X = 6735745676390044206906243421768716034165611025903859787332279999804891395018;
    uint256 constant PUB_44_Y = 14543267722227696752312843084770150673550106006603822433757472241440656853250;
    uint256 constant PUB_45_X = 3474556795655290035267756223848113788294733235290038147492206254872829019694;
    uint256 constant PUB_45_Y = 3134639788706084649766926852762951723010583810479374837954135648467366838724;
    uint256 constant PUB_46_X = 19981754314595201039181001241820157086165600114164905619829225311272215027337;
    uint256 constant PUB_46_Y = 9448607687385537103972926720230833943767479631633365645694888115583026908622;
    uint256 constant PUB_47_X = 6976993557689314966187334708296109733066454520455698866800229978010526323931;
    uint256 constant PUB_47_Y = 4536236996318710465212072586802787900475935847594860465991756564113289873713;
    uint256 constant PUB_48_X = 1386618096649362269321101545573005151171645965708587117807941459644353933532;
    uint256 constant PUB_48_Y = 19337446667619573708370602110820298731661678126529167104868715924956603939844;
    uint256 constant PUB_49_X = 13276161746454040750545882712069061569814564460404019852938463399045063007118;
    uint256 constant PUB_49_Y = 17784666328288498327843125280974259405607780323620816231495205455367953527016;
    uint256 constant PUB_50_X = 3911703131705672131010826280177608841349311589937207150795114971937710515919;
    uint256 constant PUB_50_Y = 9410038653785022890181029819732497056982827515752223578316135556796011803902;
    uint256 constant PUB_51_X = 18877477341823826553577584553081225079042009100192942923502494903690879441417;
    uint256 constant PUB_51_Y = 8848954217523753092168430197010160326585246529991636099099600219812370476415;
    uint256 constant PUB_52_X = 2500609070868205548970631006895593914867669296164384005049817670484575325985;
    uint256 constant PUB_52_Y = 17854811229524416926730782612766421634454626080554378948597181958474252899730;
    uint256 constant PUB_53_X = 14041312442668478819389595270615715314533184761140687545564154868654382651400;
    uint256 constant PUB_53_Y = 19363660186057980002336941867874123015148912336081721103510731155430028202862;
    uint256 constant PUB_54_X = 10918239061334096399478741700299590404574621250157535304210794416225806464619;
    uint256 constant PUB_54_Y = 17578625302373742229927329749217360116093457775209496214103863659603415449113;
    uint256 constant PUB_55_X = 15128171360302224109887786788566371860840837653305565719685994283632434216341;
    uint256 constant PUB_55_Y = 20117321938474058679405392209551174132050651123301039458568747473261395960163;
    uint256 constant PUB_56_X = 16733830468216748220231923118589476849775070201527059300493499596263265596098;
    uint256 constant PUB_56_Y = 19017067917557869518345337731692180189699493229021385896289687920398512318177;
    uint256 constant PUB_57_X = 13052439839537010592769030416416112018000987127499175494296546849259587141827;
    uint256 constant PUB_57_Y = 3718884350540491277923166299949312636679936875257040579762192260241845011369;
    uint256 constant PUB_58_X = 15586678173703549793811707812840015353323340704003982242956371844272242793047;
    uint256 constant PUB_58_Y = 21497753315679585919764616769473552750152422557144589432022560119915691274851;
    uint256 constant PUB_59_X = 12203525234799107245459509525621814271003288741346327108813732717327432697610;
    uint256 constant PUB_59_Y = 17014662101377894686709202863723411448642533214893283987349056036493707921870;
    uint256 constant PUB_60_X = 11990385350884858070898782960522716542633823444495080516836271731081534058914;
    uint256 constant PUB_60_Y = 5990432914124664497753558920824812568823174476880065832025922269860176188177;
    uint256 constant PUB_61_X = 5422685125039958648351417664553824467447253731961342042830371392972050614144;
    uint256 constant PUB_61_Y = 3724566013834024107241058610944272102234054572055988520139799818987992568249;
    uint256 constant PUB_62_X = 7727168334365586051895621717576082220514715309903379267807648085651495711927;
    uint256 constant PUB_62_Y = 21730946895970396807112353913907059976400881028430785416285569159978905091067;
    uint256 constant PUB_63_X = 20361838868963031219728146139982109207661110386234845571963035619769334116449;
    uint256 constant PUB_63_Y = 17099278191694638285784646366900900702969973171562781184051271005024218449340;
    uint256 constant PUB_64_X = 6732730475581738738450049618401289897615295661761768377311549249383201444912;
    uint256 constant PUB_64_Y = 6417984646644937703588473094624701579802071202950034691389951872875425375230;
    uint256 constant PUB_65_X = 9572677195483622070661876287847923310659791808550655829129732467558291123343;
    uint256 constant PUB_65_Y = 16520004422841606349318757645304648684195105037724149171751933550137575427611;
    uint256 constant PUB_66_X = 15348965466588942469096022590126333005332509320357627846304461630553564409621;
    uint256 constant PUB_66_Y = 1254153750120956523010114506248487235101362610575976232358004486568672664972;
    uint256 constant PUB_67_X = 19308949582689280792825849837627865906523977573732307748152626394831664274226;
    uint256 constant PUB_67_Y = 15523038443291406530081260293338875338776067264013150073577346406417605146995;
    uint256 constant PUB_68_X = 6364829888909296626497185654689839769985307163656517280737675504202027219585;
    uint256 constant PUB_68_Y = 8726935382955149313859118862614586521861940346530290361123610900220071536601;
    uint256 constant PUB_69_X = 19876556267721112815041185396811259571206006253223202710289090415023484395675;
    uint256 constant PUB_69_Y = 5323061772024347440869587021258695919051728298239444194616656568130568883326;
    uint256 constant PUB_70_X = 10810905910874961773237781791804074468816083520857273446934841977592994597296;
    uint256 constant PUB_70_Y = 5088710285472785303322180288286884359864252370612653233182622187172494733670;
    uint256 constant PUB_71_X = 1323306058746820068575481263006546718476299873800293715246874545432476948071;
    uint256 constant PUB_71_Y = 7110416028232912688007351160340393774823615929416400001678340637580104935190;
    uint256 constant PUB_72_X = 4464803516300933087813658570236348762088016725498131794206263891980663042091;
    uint256 constant PUB_72_Y = 5086758460212337499756473891078716535654169900073074655334479418478397189362;
    uint256 constant PUB_73_X = 18736839010653196581782821105716115379173065891966078006303505760079656101099;
    uint256 constant PUB_73_Y = 6156290555867020210891545149868588605990822639709406563776898926364667028318;
    uint256 constant PUB_74_X = 8592413633632927686515284440598701482835629030709386276372741076418431924872;
    uint256 constant PUB_74_Y = 9117196968733831164736728854901576693860969632471345099815810720979522079186;
    uint256 constant PUB_75_X = 8803156146011149900616583508419096645225582486347757450388683673308591043823;
    uint256 constant PUB_75_Y = 13533363104075808514980762291827319382602455775483386590308797656474008432123;
    uint256 constant PUB_76_X = 20363362653719799285578723918819115329034497933552529998893689697328381271477;
    uint256 constant PUB_76_Y = 9995655949949988597026273739516620794010407292629193953407794933686489961982;
    uint256 constant PUB_77_X = 20112187453050833891730028873512733537500005623892495592473013620316479172416;
    uint256 constant PUB_77_Y = 2789231433321604713176365764693565671330135831664907960448475281516111904710;
    uint256 constant PUB_78_X = 9302978989416684420512632575138274347015384838122325401136852346544824911148;
    uint256 constant PUB_78_Y = 17993393326837567899038378722631377016122676973818604856179604246588510740639;
    uint256 constant PUB_79_X = 9248192889445753116663759333716814786856993383811218498154057678899476616175;
    uint256 constant PUB_79_Y = 7338356583709749612026427772319023837812819494237681254304771235906868474282;
    uint256 constant PUB_80_X = 7048473278287243542826499800635629463642876660301809039104272107263335753939;
    uint256 constant PUB_80_Y = 15610637918620257829453300856751148777163324533712548971601736481744784096555;
    uint256 constant PUB_81_X = 268736819192737663055796134743491862312713348075214334178794927578303658207;
    uint256 constant PUB_81_Y = 1178083419603753741849705630936381190910704116664851941740399973209785838981;
    uint256 constant PUB_82_X = 14446741623140957469156586517392560640137369169503192981207547868620046295026;
    uint256 constant PUB_82_Y = 15389638239306883205178433934884443572746053862921430535678123342375804613252;
    uint256 constant PUB_83_X = 5162240659892479776433624028898768305690491064943630189910336293200074164488;
    uint256 constant PUB_83_Y = 19218168925140202927472814608778244185912655973923560386636280054733440255633;
    uint256 constant PUB_84_X = 3973845997186916693330800250084789362827598188739229945010866866319338251901;
    uint256 constant PUB_84_Y = 20857607353182198666433425374143569810963796370374603759972568208379777657571;
    uint256 constant PUB_85_X = 7267648320532397607048305710878642736306388815877207048739650697394276300065;
    uint256 constant PUB_85_Y = 1795233744717560396102343000594469233093115477260048253003275976135423887996;
    uint256 constant PUB_86_X = 3085591286574822660158674953125089237804189779360943063253914110827387476963;
    uint256 constant PUB_86_Y = 20148268243174933549983499200096345616371702590880670289198835749509963056256;
    uint256 constant PUB_87_X = 14337691890985885146852123399077395923444049604828779117104511769851903891255;
    uint256 constant PUB_87_Y = 13829520462402763438854616495158309692817064506419503806273281288094722383800;
    uint256 constant PUB_88_X = 17389450691366512648831841243532775134402343227005437087787994333996976024785;
    uint256 constant PUB_88_Y = 7300916592618152218237679423633399195428134550122258926995025403379578337785;
    uint256 constant PUB_89_X = 7299556695423422344693665550916046761982318868052906911997628520052378820545;
    uint256 constant PUB_89_Y = 7665448765505035274299515513299247132927750151969472468932077151060418961992;
    uint256 constant PUB_90_X = 12457504902475438759995841469589640513968812342925599294370366286862976119399;
    uint256 constant PUB_90_Y = 6968717443580499466749795161801810390627756422291915018118191101426530822097;
    uint256 constant PUB_91_X = 18158678525931343086383661285368536788360345407155176188161345306806074210174;
    uint256 constant PUB_91_Y = 8534816571319329472939307787969726558124670026244648508338611968724882949288;
    uint256 constant PUB_92_X = 4651315788104651319657080736002574017315813662997348424489631698160962547845;
    uint256 constant PUB_92_Y = 11740244940881264207893223153551642518626198904641607304189723746462853147096;
    uint256 constant PUB_93_X = 1186733021053372159769821522846578311629952148705880161929188169714002596916;
    uint256 constant PUB_93_Y = 670210341225313799089097964973643852456611239749712219342949892674270507609;
    uint256 constant PUB_94_X = 20229440935408622559868283107562607325933039726432579694276631067427434969082;
    uint256 constant PUB_94_Y = 17672447296765233110574635025594085947169083500690020172896008605028055116760;
    uint256 constant PUB_95_X = 12282800311703953476819499234741978933893707900821779935177734734428393951243;
    uint256 constant PUB_95_Y = 20596036058604860775586713723535262169007918087984565415796812490261246369063;
    uint256 constant PUB_96_X = 5762368121525076738349091363025872141699088117220839176148813421925804248300;
    uint256 constant PUB_96_Y = 14929169520762915297932571446143142110521984387771016395782742934361197102244;
    uint256 constant PUB_97_X = 9999967788770035320982462866279237996125091814526097854046818611781680467489;
    uint256 constant PUB_97_Y = 9581919491773659976980995583191378017625156414076204597338017109420204743668;
    uint256 constant PUB_98_X = 15693827742378621311446217690432363845808999074755575508604427537358958216657;
    uint256 constant PUB_98_Y = 11244017758202369097862163579738431889416418550935808147859153917361284043795;
    uint256 constant PUB_99_X = 17252521022047457845561002160385378557766613841708301308379127016304707667279;
    uint256 constant PUB_99_Y = 18498457786346341278730978847453760088781127467173813899613040390668154490738;
    uint256 constant PUB_100_X = 19298429050633220147881009980028404444646852042565239878375007018845335118032;
    uint256 constant PUB_100_Y = 1893288073597696485672282040817060342896979439997751237234867330131123208066;
    uint256 constant PUB_101_X = 12017457968377795007127375985352217189723333631218095781186847637405411246858;
    uint256 constant PUB_101_Y = 1474426891467858874399033580603718298412799532891835438172236556741253126062;
    uint256 constant PUB_102_X = 11070104369012016356014693681467866883285152853622124055626358989913267415220;
    uint256 constant PUB_102_Y = 577600153107027938422977087427857787360396617996755046859711863167090190631;
    uint256 constant PUB_103_X = 13499404382201716877836674965104007860423766170167099887943742579885968948762;
    uint256 constant PUB_103_Y = 4984672504869730941669071410276282970670880590838506559830079297866423330477;
    uint256 constant PUB_104_X = 16408108601343485070190895686437845950318851810852587721483046382725832282940;
    uint256 constant PUB_104_Y = 20825922930124727634643784034715242103777957503317637425992342353086739316434;
    uint256 constant PUB_105_X = 17276040599362054438757803327114058050009886801551877081076330014910582366219;
    uint256 constant PUB_105_Y = 7212951699734201209429349914862965945493052799188079658172017326755307273426;
    uint256 constant PUB_106_X = 3452395405371203022558210317814709349548461589130244259764968288236863735233;
    uint256 constant PUB_106_Y = 7950212313685463031333579277336845663380422772961670274081649554294986916283;
    uint256 constant PUB_107_X = 16627130534982487740074930296839886586054103071470039063252039145670034254438;
    uint256 constant PUB_107_Y = 7145221522184046160782102343077127891858560080060576008862485360517933651443;
    uint256 constant PUB_108_X = 13064735035957907730487565720581505217215593203925129586724552484811794639485;
    uint256 constant PUB_108_Y = 20065111563205667869223152815169753309175720405660589647671301643534699605342;
    uint256 constant PUB_109_X = 20963332426051049821143370474978379273797583762514501962745788816152097682028;
    uint256 constant PUB_109_Y = 8671317901567990532004424506828777477165139700735696870578429894281459200366;
    uint256 constant PUB_110_X = 14002488487638525619233031257071713307020222574534655299382811822921883688727;
    uint256 constant PUB_110_Y = 16730581625980965520574471402069848112769805686003026413929750255387417917106;
    uint256 constant PUB_111_X = 5335560956822166824169129829567263705735192337940004555596445710801708110466;
    uint256 constant PUB_111_Y = 1046514131613503543003734059455550124885911203004516021948114543786929969478;
    uint256 constant PUB_112_X = 15454545701643367078277264464187735217634098753097219300222291386981374584256;
    uint256 constant PUB_112_Y = 14357913673477145672517688288839946393428263045532818295657181462929253590262;
    uint256 constant PUB_113_X = 9997764584938356472363708285170835038345137193848549014451246802331522550120;
    uint256 constant PUB_113_Y = 20652277497478140019902203040972083377738468672618263731386036184504640924136;
    uint256 constant PUB_114_X = 796439949187473020064178701328342547473782817708001101961662670876616696823;
    uint256 constant PUB_114_Y = 12390797993394250378331985914465896242192005038904623902779431100499107126517;
    uint256 constant PUB_115_X = 2668013643874231887935143688930707045696961459741655768974636758974837992634;
    uint256 constant PUB_115_Y = 17417627324801908080614823305139862933164482219410692863346029901231197039878;
    uint256 constant PUB_116_X = 9338832219772831653363108559980349553465377233275275433197572807764512047593;
    uint256 constant PUB_116_Y = 1547768753336146104946553729617946383849087877378250285518176913384389417868;
    uint256 constant PUB_117_X = 10757197993626499572379472399995460035575829038032422701529483851201268453875;
    uint256 constant PUB_117_Y = 6869146152006198262794159212198817824618102742111874680455877669790118697166;
    uint256 constant PUB_118_X = 11273444700849260838555482606224611484445394300914503162777749589714866231356;
    uint256 constant PUB_118_Y = 17001808547266417580171602467884734604520629468355414347411941640269970315068;
    uint256 constant PUB_119_X = 4754295491835029365527409028890182624149196856257251450314570078912392946148;
    uint256 constant PUB_119_Y = 2827871725169289556089548343627891772237180997668941092226391781370362774462;
    uint256 constant PUB_120_X = 18132459937829924389973389943300309571351145444638701940426359358059615475869;
    uint256 constant PUB_120_Y = 19920845950236784763181536601034686700368312955475631647154729351819909249781;
    uint256 constant PUB_121_X = 849537800316476557234003490604905064287177223020366579015241759610633828840;
    uint256 constant PUB_121_Y = 591045597677494609874463084215073634948664188268945514864457910679891908856;
    uint256 constant PUB_122_X = 17933440702523911283148277651571518449501361918745660668594493915778553883085;
    uint256 constant PUB_122_Y = 10155641181181876023722212089442399716207827972707343891788099107873539697494;
    uint256 constant PUB_123_X = 14005727957138345442644489197932335695549664024052467101117511863194105351078;
    uint256 constant PUB_123_Y = 14599447437322162913966321258019026401328020843216835135623229146476143430840;
    uint256 constant PUB_124_X = 2028531752363942257147263243882605999666918170700833514875869026472294185071;
    uint256 constant PUB_124_Y = 7271300629900007839091781273174562560433393144741126579789783217780700668366;
    uint256 constant PUB_125_X = 17816711759101606649662242257953084042968642903122918847028486590046997353939;
    uint256 constant PUB_125_Y = 12456189744834071757093892686634970397428417613928386316826955222814414686;
    uint256 constant PUB_126_X = 21450986519589668765008385162146737853938641968791534375665922258188746834143;
    uint256 constant PUB_126_Y = 10504818404344923948182653616707016249701882097345459704388391843498520494747;
    uint256 constant PUB_127_X = 9115072093766075368306259448669725805313245914114609659099438791428961939981;
    uint256 constant PUB_127_Y = 497405207142217433476423982097163820971314793787659678056728071902129923417;
    uint256 constant PUB_128_X = 3150581346489306082987537167727797313245693373422741907089780744016981691173;
    uint256 constant PUB_128_Y = 4910978111351376098879587916952098243888221514044775199050229450087365856389;
    uint256 constant PUB_129_X = 17531338921495952887950273187298372242643844838369999695841220374146902317027;
    uint256 constant PUB_129_Y = 15238466648199252838789721873974806680156609959931052469518679580432995480062;
    uint256 constant PUB_130_X = 14153115507081274436166843276140644240657547531246972708195506430919005604783;
    uint256 constant PUB_130_Y = 16116506757264370437190561427344268583784067608470756434633679713768402365234;
    uint256 constant PUB_131_X = 11002989412923111896456026605124137178205832782598885418520226881257008448529;
    uint256 constant PUB_131_Y = 13145745488619375609422013363956549689149798525236475863020002926085562287704;
    uint256 constant PUB_132_X = 12250677557679663270053598231617691000485089001366804936744095516882973485816;
    uint256 constant PUB_132_Y = 11632471118973152011516521465750556780394874138964712075057172212021137870145;
    uint256 constant PUB_133_X = 10794630800180851630740252514297772060839649605399790495626080718110432811250;
    uint256 constant PUB_133_Y = 12547497693120849598967078636879957702586951140521826897970358889803338429917;
    uint256 constant PUB_134_X = 16940460470487420054342910911529771412099153728620630768961249384771454430832;
    uint256 constant PUB_134_Y = 4614205358708450594813905100685259464992170248866936203248773225887438906234;
    uint256 constant PUB_135_X = 21810850848677590017891974082912870679854535123178810609193806546503880644699;
    uint256 constant PUB_135_Y = 11598483011757933120467393268601365874968444417957234707745029246944925338506;
    uint256 constant PUB_136_X = 21338898740545660941280736535594107063790725382236394554710698726923193689363;
    uint256 constant PUB_136_Y = 21176686048361815769563712864693988028044938212351449733022515475709418339365;
    uint256 constant PUB_137_X = 6605284310465714528856536467974070697942950906025349919763251696731209519377;
    uint256 constant PUB_137_Y = 1732042967418348785845818379319521138816608222389402777155842735744973136229;
    uint256 constant PUB_138_X = 13624663644778187998550057900822105642645411240423201118483742875445465274369;
    uint256 constant PUB_138_Y = 20913810746282774916468971574156057411866213320150012252097932365750097875341;
    uint256 constant PUB_139_X = 6743910791040994629987944476889392192414573044109525384124617583616021830556;
    uint256 constant PUB_139_Y = 17336144905335177498517422791642923726129129774901369880108071323116170891892;
    uint256 constant PUB_140_X = 9206821639375835901913318805839873727283519089716475896016108218575907476235;
    uint256 constant PUB_140_Y = 10572724313858286220988451039585306935455074085051966560449892286591967275649;
    uint256 constant PUB_141_X = 21101006135066810731299482638798677018715010723916135290885927243432465828916;
    uint256 constant PUB_141_Y = 11562069628710797666756752379371397085459966561222272667563900489203902720410;
    uint256 constant PUB_142_X = 5804932452595947118233655563786443180882877019209090754967794104635444253209;
    uint256 constant PUB_142_Y = 9866012494921945663243569969240134028152028658689686330787626734809610959317;
    uint256 constant PUB_143_X = 9173794011747954809949389867820270212150988837972554618627150127388754023073;
    uint256 constant PUB_143_Y = 2972618865167678214235596395079035833514551546094245407012300295089200657216;
    uint256 constant PUB_144_X = 9144210528150229238605224000605559390286631273399199359359162345921963389332;
    uint256 constant PUB_144_Y = 6753381044841455621850495347330536537560835635785254672845259094877923141194;
    uint256 constant PUB_145_X = 4166218630256474135753037539905573717624564827348522080822510139016032356591;
    uint256 constant PUB_145_Y = 12698323076939105201415036542375012515750491841106988675994254575470891584599;
    uint256 constant PUB_146_X = 9890275809964185358600481397163325919977710699649641199316235348839729678575;
    uint256 constant PUB_146_Y = 10024822516761501631172997341782625473862943983462041497160502462773023287647;
    uint256 constant PUB_147_X = 6129370885258473250724817821441076931528785110885014691584175009870735180975;
    uint256 constant PUB_147_Y = 21783792963135173637722792784549744154180001351486346343138170886464803569547;
    uint256 constant PUB_148_X = 19586169644280648096239234485383702947273526390981059500904486577996908601742;
    uint256 constant PUB_148_Y = 19461576288596549361308940000994225125358227627591109783998883407162819283228;
    uint256 constant PUB_149_X = 16183876326720011279870511274008021917363718478377714694274190245244119153214;
    uint256 constant PUB_149_Y = 1974479534540383133437722075155820149168396105057662698525413428657516463723;
    uint256 constant PUB_150_X = 19128109958692203630461386484204480973306537683349846619324784528076437224515;
    uint256 constant PUB_150_Y = 8240327762746826421959162600875398106932406694391585374073124731100264947480;
    uint256 constant PUB_151_X = 3424525997572650079736513784121129371401185028820617279967485853875475338530;
    uint256 constant PUB_151_Y = 18949642792717571934024859407331503031821934733829016820114216682022691717068;
    uint256 constant PUB_152_X = 7275985509633098733390238841258829894584664278971240834906385623908036652020;
    uint256 constant PUB_152_Y = 2255251289167674226861365549993008749295579776578404507506270325780896970527;
    uint256 constant PUB_153_X = 14149593685238979045478226488447947098275448940476885439258958046702499648611;
    uint256 constant PUB_153_Y = 17049635616205050393042731385224814821782499039244429919417524748086209847508;
    uint256 constant PUB_154_X = 19994733385898974534809606398645886918325248525305849004460159232433853789117;
    uint256 constant PUB_154_Y = 12813423257685799687552767330982114548244036401069962382533025190730941243612;
    uint256 constant PUB_155_X = 15141296845493753605329572104743360690140671022567409224042290557520605146593;
    uint256 constant PUB_155_Y = 17875643241319250514606903928446480068964218203418196383277478439125480616273;
    uint256 constant PUB_156_X = 11577575459115412218390672995924365654342717445300171517862797622992206422032;
    uint256 constant PUB_156_Y = 1811686011582854104103653988539830560599511632962708915568763962474362234031;
    uint256 constant PUB_157_X = 16729838615749962215533909672378149309923457008343206757039651158202656880859;
    uint256 constant PUB_157_Y = 13982720352311139196151909200732160035083374942853118720496278445273579279200;
    uint256 constant PUB_158_X = 15189791707015908985349175200642380351888737740806838981662808830194630038919;
    uint256 constant PUB_158_Y = 6728144815411682930418480985884946847475940124065488571329179638952371095909;
    uint256 constant PUB_159_X = 20779481491692658927240346961387608390518258582293010505350535494147766846703;
    uint256 constant PUB_159_Y = 8000037333508221540390770666818789355826330735819068184894543727103885660894;
    uint256 constant PUB_160_X = 17527411762881077615391799550191299453662144885517556471564879924564138661128;
    uint256 constant PUB_160_Y = 6287412858685113162075079849455790408813842531272134039023217403623810245374;
    uint256 constant PUB_161_X = 20160732743656512203241056077530385653320119581333398350568940436644139521532;
    uint256 constant PUB_161_Y = 12205793252563482693615377411204618835752143649278865600529530863459260857968;
    uint256 constant PUB_162_X = 4641372950635687395640146478933326292813528226310572504615496673584602749846;
    uint256 constant PUB_162_Y = 10878240405637961362177926395200594891110377990219268549550948191270290368741;
    uint256 constant PUB_163_X = 15438004742220302435289827790704101007329893220393482047519313991390207052922;
    uint256 constant PUB_163_Y = 19567076140729125244884943091451274505309689470027287445842201575480198562287;
    uint256 constant PUB_164_X = 12518288664355205674723342669199787074871205690949145765837311848844367326786;
    uint256 constant PUB_164_Y = 14504914069131298562756128542818561896281862304477403346855221988016047817143;
    uint256 constant PUB_165_X = 10408907797959543028288712564337795949640946008081968442894340154356825670566;
    uint256 constant PUB_165_Y = 3964440851294570287337336710864620389502328947987067336595914105625719424849;
    uint256 constant PUB_166_X = 11634984529522286191086430567208014785398334759217008865596788717413097083016;
    uint256 constant PUB_166_Y = 3800731548581513654394839041857347014901636180878208023698830130330448224108;
    uint256 constant PUB_167_X = 13473959329174906333627518036733046335487421650235951335882879804934196862051;
    uint256 constant PUB_167_Y = 20414177816994874310595681499416714185278790531156907303179030442157224851790;
    uint256 constant PUB_168_X = 3748850376892690307644805779370207544131401629053850654826365590016078747502;
    uint256 constant PUB_168_Y = 17345382093144638676083562985192105792484560564267363150405518895435554270697;
    uint256 constant PUB_169_X = 17759675935094853528837049821508897663848847439061805172116027341283911715958;
    uint256 constant PUB_169_Y = 21468424455162462911206895137256219913057774158209589780823818707390367237355;
    uint256 constant PUB_170_X = 17750666476298669170752243935990901038303336649102436776324143694839184677219;
    uint256 constant PUB_170_Y = 18351504930307940823270452463461749570402094629396259421398979482680694186941;
    uint256 constant PUB_171_X = 17080345876269780516285913376940692940569192446261548799036171616957365714341;
    uint256 constant PUB_171_Y = 2617022972210451957996797756269040668768548354421279375243100140174680051248;
    uint256 constant PUB_172_X = 17681697104177043589003577874739268060228507175275869120403573229822448402229;
    uint256 constant PUB_172_Y = 14902547106007181000375328901453011678015860518419173406158708946565848614945;
    uint256 constant PUB_173_X = 10808970036922640592256537683462352966560978824166101247425078460809983016101;
    uint256 constant PUB_173_Y = 19047912579619965413319534940754644332449615080194085060886508645415157259258;
    uint256 constant PUB_174_X = 14661016062491848873374194197146630189760588651485499555179384322563205381062;
    uint256 constant PUB_174_Y = 18944987277932043380030383749075496032668807504001848647661244977313387771148;
    uint256 constant PUB_175_X = 12536461001562224381144003562475326320004277944260161249224188786577220119447;
    uint256 constant PUB_175_Y = 19121113796875975246524226938948867569002406163173311745142676887983987654700;
    uint256 constant PUB_176_X = 15261755242656912206246795545941792633004518716686408964247277135876787069101;
    uint256 constant PUB_176_Y = 12958191938648504039516601130469355517066537695967561496732501038661600351496;
    uint256 constant PUB_177_X = 15023752093166408914564848046073879062083974540971217813848822335224181589049;
    uint256 constant PUB_177_Y = 1455660409176269834008046247218204165028382045993667125187814502862408211899;
    uint256 constant PUB_178_X = 17903115640949909114636296992238985206356725976055243274150221159708968023643;
    uint256 constant PUB_178_Y = 10597457682484251491687015737195731515252530926032435703547270802423305167812;
    uint256 constant PUB_179_X = 13273459517619391379989159506003453449720409672527530813248216869828572445612;
    uint256 constant PUB_179_Y = 12891529666719435527658224463312861636481808556120307028641992350410615969371;
    uint256 constant PUB_180_X = 20706096804176414441080832555739580792111539609565134072968076532378767953757;
    uint256 constant PUB_180_Y = 2087163427749703726289356443878515132453870148447935834112272704502275017091;
    uint256 constant PUB_181_X = 2780944036701108347163979017134732418069044934080258867178308464625515722483;
    uint256 constant PUB_181_Y = 5124699807113432728178152384412583342839442029947202214076441113843514446200;
    uint256 constant PUB_182_X = 19820479241925317213573434516910480757802360876732704999966468954696513147067;
    uint256 constant PUB_182_Y = 12272283547010359312382000533986594354148227195692467510608503822048122377543;
    uint256 constant PUB_183_X = 21671718884067896608093779246382030623133398733833189834577687712750458175512;
    uint256 constant PUB_183_Y = 18646340122570203504402391545973749306792370111158517690568319652763151956201;
    uint256 constant PUB_184_X = 8828188591488180538529231166544989387622185866221159710207736289212762060993;
    uint256 constant PUB_184_Y = 20044876708564840997536246838128658049779455352536020572674137528754549933820;
    uint256 constant PUB_185_X = 17255557282697077697290843977687817692284055470458184494286927532524725371292;
    uint256 constant PUB_185_Y = 11791220868595068600587421649335024091164138075533545696697096208092816663724;
    uint256 constant PUB_186_X = 8869535204972890174752676681306777398627923084005506854874764321840920091748;
    uint256 constant PUB_186_Y = 3596102337045470574386669482174210937556392247914661775202872637228054600229;
    uint256 constant PUB_187_X = 15302213293918860931065447776054511746183021953797144045553025890031249599230;
    uint256 constant PUB_187_Y = 2974145547372901613314102466241692581692696418192748639767370951218477861713;
    uint256 constant PUB_188_X = 7716406665346089202047968909826973463529716856914357877494322525051875006890;
    uint256 constant PUB_188_Y = 3290080358151749696087221152417909613727180728541658828665439925682750958261;
    uint256 constant PUB_189_X = 11437276225920406209736838833344569292943720504522765588775722894954434892106;
    uint256 constant PUB_189_Y = 9055125985511449049783898532902263382730850126047446522150590969405300605790;
    uint256 constant PUB_190_X = 11369388400482673102746794810984846092108655271678927541906466678653074072808;
    uint256 constant PUB_190_Y = 15469023887829680082872903872621278961301608885987875359296776719090224134473;
    uint256 constant PUB_191_X = 15866147666045918963042804981660325159077239235090273334856563950102482091167;
    uint256 constant PUB_191_Y = 16872198806294217468273488838754261666839045360399349577213748921845881362589;
    uint256 constant PUB_192_X = 20697427420915747790475275837296632102735717782916966880384718039542273846675;
    uint256 constant PUB_192_Y = 2696324485395044779968018718779137044674908014395286776396987527203303672767;
    uint256 constant PUB_193_X = 7087929760890164049430364083546470307103103771481679066242474794483027455771;
    uint256 constant PUB_193_Y = 10406850027543997778641909509232923849624869928950095873902629310515121832434;
    uint256 constant PUB_194_X = 19266759337370771671525156331046157968035293559964454221148619198602040337951;
    uint256 constant PUB_194_Y = 2938588862105835829132265731428861256279169893449676976600210702217116296690;
    uint256 constant PUB_195_X = 17119439490719747283420151407913495592048940288282212332458446710143394913855;
    uint256 constant PUB_195_Y = 7426220778232360536979843652805572332189197062388869839907034198779559899161;
    uint256 constant PUB_196_X = 11634990670793395760261885089703522934570877349994946387530148137111421588711;
    uint256 constant PUB_196_Y = 19106005109134612640487808642174755955762727446163629172322824569344029526070;
    uint256 constant PUB_197_X = 4279126927376469187212773288324013407131725171036730895561041237617345690060;
    uint256 constant PUB_197_Y = 9740366940559159976315251038684578544013045907684735559060201660424815042373;
    uint256 constant PUB_198_X = 17185040280621963772354613870858249170689177851505068801470529714671673349016;
    uint256 constant PUB_198_Y = 3826786493867140134413453696233273060735812937211095079366517845420707344116;
    uint256 constant PUB_199_X = 19053129352443910197062664990784696205874280617505240398524202065919282702410;
    uint256 constant PUB_199_Y = 3017052606002531877649911369120745309229124722654091672876584685702703381286;
    uint256 constant PUB_200_X = 3848552291762137989429578589194402165532732114317284426800516962830358540024;
    uint256 constant PUB_200_Y = 9908279563310419477656467375488409601947016199214215598103195299787159307786;
    uint256 constant PUB_201_X = 9309191702533183603795070174259989605963869038927373648989464084429974276673;
    uint256 constant PUB_201_Y = 15863106563817222137656942865145850638163001233786738281505254225416721634404;
    uint256 constant PUB_202_X = 20661669276761175536663222331632437134795359844108853120980581067301388540794;
    uint256 constant PUB_202_Y = 14298204178567161700507165373522057812066260562236269932843004993194920543469;
    uint256 constant PUB_203_X = 12990948302353933529055276410746676708902354098281281140014276360989223069606;
    uint256 constant PUB_203_Y = 7473210696421165877609487629007292942635412732041221635843646065370020702840;
    uint256 constant PUB_204_X = 19485759679436346716281734672097621734652686415730513269477270731472416615662;
    uint256 constant PUB_204_Y = 11530160518464638948423574651632988737772543975412680746517612158716888258118;
    uint256 constant PUB_205_X = 7180384955799776646311101440670412284544259313430055924033130328453462900996;
    uint256 constant PUB_205_Y = 20632841268872465796829232839160772184789883259712752066714431937298035728597;
    uint256 constant PUB_206_X = 18888762740535734969259733837929368744287933483003288613859269725194563422092;
    uint256 constant PUB_206_Y = 6392274887907785081543773335110415637386000971463787326060687449273990705881;
    uint256 constant PUB_207_X = 15586418884473885030543015455564156812399638360653137603187869073966806475740;
    uint256 constant PUB_207_Y = 14931306875900203008171478147434737386740204721865104647223969359535910508039;
    uint256 constant PUB_208_X = 19998951264574405857959973225495979427732318033963995992387230622555315617055;
    uint256 constant PUB_208_Y = 11513898898572030969072233435641246241977604814190633053072757858678437380583;
    uint256 constant PUB_209_X = 16300586320657848934494651152032095232084661214823538589947760033038822294899;
    uint256 constant PUB_209_Y = 2495672254394263954462422513496861210907716172709943941130348237561301521348;
    uint256 constant PUB_210_X = 8742513324340994094743573264897835932647246243544491862735944289207787558023;
    uint256 constant PUB_210_Y = 21805665227681774421648834762598861290310832121624487291922665512272843969684;
    uint256 constant PUB_211_X = 3070994778015819598842085050980464011382217491876319182925543457420694928843;
    uint256 constant PUB_211_Y = 4668358888391041571463352484633357385319434845192762529450843738496640874974;

    /// Negation in Fp.
    /// @notice Returns a number x such that a + x = 0 in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @return x the result
    function negate(uint256 a) internal pure returns (uint256 x) {
        unchecked {
            x = (P - (a % P)) % P; // Modulo is cheaper than branching
        }
    }

    /// Exponentiation in Fp.
    /// @notice Returns a number x such that a ^ e = x in Fp.
    /// @notice The input does not need to be reduced.
    /// @param a the base
    /// @param e the exponent
    /// @return x the result
    function exp(uint256 a, uint256 e) internal view returns (uint256 x) {
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40)
            mstore(f, 0x20)
            mstore(add(f, 0x20), 0x20)
            mstore(add(f, 0x40), 0x20)
            mstore(add(f, 0x60), a)
            mstore(add(f, 0x80), e)
            mstore(add(f, 0xa0), P)
            success := staticcall(gas(), PRECOMPILE_MODEXP, f, 0xc0, f, 0x20)
            x := mload(f)
        }
        if (!success) {
            // Exponentiation failed.
            // Should not happen.
            revert ProofInvalid();
        } 
    }

    /// Invertsion in Fp.
    /// @notice Returns a number x such that a * x = 1 in Fp.
    /// @notice The input does not need to be reduced.
    /// @notice Reverts with ProofInvalid() if the inverse does not exist
    /// @param a the input
    /// @return x the solution
    function invert_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_INVERSE_FP);
        if (mulmod(a, x, P) != 1) {
            // Inverse does not exist.
            // Can only happen during G2 point decompression.
            revert ProofInvalid();
        }
    }

    /// Square root in Fp.
    /// @notice Returns a number x such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function sqrt_Fp(uint256 a) internal view returns (uint256 x) {
        x = exp(a, EXP_SQRT_FP);
        if (mulmod(x, x, P) != a) {
            // Square root does not exist or a is not reduced.
            // Happens when G1 point is not on curve.
            revert ProofInvalid();
        }
    }

    /// Square test in Fp.
    /// @notice Returns wheter a number x exists such that x * x = a in Fp.
    /// @notice Will revert with InvalidProof() if the input is not a square
    /// or not reduced.
    /// @param a the square
    /// @return x the solution
    function isSquare_Fp(uint256 a) internal view returns (bool) {
        uint256 x = exp(a, EXP_SQRT_FP);
        return mulmod(x, x, P) == a;
    }

    /// Square root in Fp2.
    /// @notice Fp2 is the complex extension Fp[i]/(i^2 + 1). The input is
    /// a0 + a1 ⋅ i and the result is x0 + x1 ⋅ i.
    /// @notice Will revert with InvalidProof() if
    ///   * the input is not a square,
    ///   * the hint is incorrect, or
    ///   * the input coefficents are not reduced.
    /// @param a0 The real part of the input.
    /// @param a1 The imaginary part of the input.
    /// @param hint A hint which of two possible signs to pick in the equation.
    /// @return x0 The real part of the square root.
    /// @return x1 The imaginary part of the square root.
    function sqrt_Fp2(uint256 a0, uint256 a1, bool hint) internal view returns (uint256 x0, uint256 x1) {
        // If this square root reverts there is no solution in Fp2.
        uint256 d = sqrt_Fp(addmod(mulmod(a0, a0, P), mulmod(a1, a1, P), P));
        if (hint) {
            d = negate(d);
        }
        // If this square root reverts there is no solution in Fp2.
        x0 = sqrt_Fp(mulmod(addmod(a0, d, P), FRACTION_1_2_FP, P));
        x1 = mulmod(a1, invert_Fp(mulmod(x0, 2, P)), P);

        // Check result to make sure we found a root.
        // Note: this also fails if a0 or a1 is not reduced.
        if (a0 != addmod(mulmod(x0, x0, P), negate(mulmod(x1, x1, P)), P)
        ||  a1 != mulmod(2, mulmod(x0, x1, P), P)) {
            revert ProofInvalid();
        }
    }

    /// Compress a G1 point.
    /// @notice Reverts with InvalidProof if the coordinates are not reduced
    /// or if the point is not on the curve.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param x The X coordinate in Fp.
    /// @param y The Y coordinate in Fp.
    /// @return c The compresed point (x with one signal bit).
    function compress_g1(uint256 x, uint256 y) internal view returns (uint256 c) {
        if (x >= P || y >= P) {
            // G1 point not in field.
            revert ProofInvalid();
        }
        if (x == 0 && y == 0) {
            // Point at infinity
            return 0;
        }
        
        // Note: sqrt_Fp reverts if there is no solution, i.e. the x coordinate is invalid.
        uint256 y_pos = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (y == y_pos) {
            return (x << 1) | 0;
        } else if (y == negate(y_pos)) {
            return (x << 1) | 1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G1 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The point at infinity is encoded as (0,0) and compressed to 0.
    /// @param c The compresed point (x with one signal bit).
    /// @return x The X coordinate in Fp.
    /// @return y The Y coordinate in Fp.
    function decompress_g1(uint256 c) internal view returns (uint256 x, uint256 y) {
        // Note that X = 0 is not on the curve since 0³ + 3 = 3 is not a square.
        // so we can use it to represent the point at infinity.
        if (c == 0) {
            // Point at infinity as encoded in EIP196 and EIP197.
            return (0, 0);
        }
        bool negate_point = c & 1 == 1;
        x = c >> 1;
        if (x >= P) {
            // G1 x coordinate not in field.
            revert ProofInvalid();
        }

        // Note: (x³ + 3) is irreducible in Fp, so it can not be zero and therefore
        //       y can not be zero.
        // Note: sqrt_Fp reverts if there is no solution, i.e. the point is not on the curve.
        y = sqrt_Fp(addmod(mulmod(mulmod(x, x, P), x, P), 3, P));
        if (negate_point) {
            y = negate(y);
        }
    }

    /// Compress a G2 point.
    /// @notice Reverts with InvalidProof if the coefficients are not reduced
    /// or if the point is not on the curve.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i). 
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param x0 The real part of the X coordinate.
    /// @param x1 The imaginary poart of the X coordinate.
    /// @param y0 The real part of the Y coordinate.
    /// @param y1 The imaginary part of the Y coordinate.
    /// @return c0 The first half of the compresed point (x0 with two signal bits).
    /// @return c1 The second half of the compressed point (x1 unmodified).
    function compress_g2(uint256 x0, uint256 x1, uint256 y0, uint256 y1)
    internal view returns (uint256 c0, uint256 c1) {
        if (x0 >= P || x1 >= P || y0 >= P || y1 >= P) {
            // G2 point not in field.
            revert ProofInvalid();
        }
        if ((x0 | x1 | y0 | y1) == 0) {
            // Point at infinity
            return (0, 0);
        }

        // Compute y^2
        // Note: shadowing variables and scoping to avoid stack-to-deep.
        uint256 y0_pos;
        uint256 y1_pos;
        {
            uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
            uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
            uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);
            y0_pos = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
            y1_pos = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));
        }

        // Determine hint bit
        // If this sqrt fails the x coordinate is not on the curve.
        bool hint;
        {
            uint256 d = sqrt_Fp(addmod(mulmod(y0_pos, y0_pos, P), mulmod(y1_pos, y1_pos, P), P));
            hint = !isSquare_Fp(mulmod(addmod(y0_pos, d, P), FRACTION_1_2_FP, P));
        }

        // Recover y
        (y0_pos, y1_pos) = sqrt_Fp2(y0_pos, y1_pos, hint);
        if (y0 == y0_pos && y1 == y1_pos) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 0;
            c1 = x1;
        } else if (y0 == negate(y0_pos) && y1 == negate(y1_pos)) {
            c0 = (x0 << 2) | (hint ? 2  : 0) | 1;
            c1 = x1;
        } else {
            // G1 point not on curve.
            revert ProofInvalid();
        }
    }

    /// Decompress a G2 point.
    /// @notice Reverts with InvalidProof if the input does not represent a valid point.
    /// @notice The G2 curve is defined over the complex extension Fp[i]/(i^2 + 1)
    /// with coordinates (x0 + x1 ⋅ i, y0 + y1 ⋅ i). 
    /// @notice The point at infinity is encoded as (0,0,0,0) and compressed to (0,0).
    /// @param c0 The first half of the compresed point (x0 with two signal bits).
    /// @param c1 The second half of the compressed point (x1 unmodified).
    /// @return x0 The real part of the X coordinate.
    /// @return x1 The imaginary poart of the X coordinate.
    /// @return y0 The real part of the Y coordinate.
    /// @return y1 The imaginary part of the Y coordinate.
    function decompress_g2(uint256 c0, uint256 c1)
    internal view returns (uint256 x0, uint256 x1, uint256 y0, uint256 y1) {
        // Note that X = (0, 0) is not on the curve since 0³ + 3/(9 + i) is not a square.
        // so we can use it to represent the point at infinity.
        if (c0 == 0 && c1 == 0) {
            // Point at infinity as encoded in EIP197.
            return (0, 0, 0, 0);
        }
        bool negate_point = c0 & 1 == 1;
        bool hint = c0 & 2 == 2;
        x0 = c0 >> 2;
        x1 = c1;
        if (x0 >= P || x1 >= P) {
            // G2 x0 or x1 coefficient not in field.
            revert ProofInvalid();
        }

        uint256 n3ab = mulmod(mulmod(x0, x1, P), P-3, P);
        uint256 a_3 = mulmod(mulmod(x0, x0, P), x0, P);
        uint256 b_3 = mulmod(mulmod(x1, x1, P), x1, P);

        y0 = addmod(FRACTION_27_82_FP, addmod(a_3, mulmod(n3ab, x1, P), P), P);
        y1 = negate(addmod(FRACTION_3_82_FP,  addmod(b_3, mulmod(n3ab, x0, P), P), P));

        // Note: sqrt_Fp2 reverts if there is no solution, i.e. the point is not on the curve.
        // Note: (X³ + 3/(9 + i)) is irreducible in Fp2, so y can not be zero.
        //       But y0 or y1 may still independently be zero.
        (y0, y1) = sqrt_Fp2(y0, y1, hint);
        if (negate_point) {
            y0 = negate(y0);
            y1 = negate(y1);
        }
    }

    /// Compute the public input linear combination.
    /// @notice Reverts with PublicInputNotInField if the input is not in the field.
    /// @notice Computes the multi-scalar-multiplication of the public input
    /// elements and the verification key including the constant term.
    /// @param input The public inputs. These are elements of the scalar field Fr.
    /// @return x The X coordinate of the resulting G1 point.
    /// @return y The Y coordinate of the resulting G1 point.
    function publicInputMSM(uint256[212] calldata input)
    internal view returns (uint256 x, uint256 y) {
        // Note: The ECMUL precompile does not reject unreduced values, so we check this.
        // Note: Unrolling this loop does not cost much extra in code-size, the bulk of the
        //       code-size is in the PUB_ constants.
        // ECMUL has input (x, y, scalar) and output (x', y').
        // ECADD has input (x1, y1, x2, y2) and output (x', y').
        // We call them such that ecmul output is already in the second point
        // argument to ECADD so we can have a tight loop.
        bool success = true;
        assembly ("memory-safe") {
            let f := mload(0x40)
            let g := add(f, 0x40)
            let s
            mstore(f, CONSTANT_X)
            mstore(add(f, 0x20), CONSTANT_Y)
            mstore(g, PUB_0_X)
            mstore(add(g, 0x20), PUB_0_Y)
            s :=  calldataload(input)
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_1_X)
            mstore(add(g, 0x20), PUB_1_Y)
            s :=  calldataload(add(input, 32))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_2_X)
            mstore(add(g, 0x20), PUB_2_Y)
            s :=  calldataload(add(input, 64))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_3_X)
            mstore(add(g, 0x20), PUB_3_Y)
            s :=  calldataload(add(input, 96))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_4_X)
            mstore(add(g, 0x20), PUB_4_Y)
            s :=  calldataload(add(input, 128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_5_X)
            mstore(add(g, 0x20), PUB_5_Y)
            s :=  calldataload(add(input, 160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_6_X)
            mstore(add(g, 0x20), PUB_6_Y)
            s :=  calldataload(add(input, 192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_7_X)
            mstore(add(g, 0x20), PUB_7_Y)
            s :=  calldataload(add(input, 224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_8_X)
            mstore(add(g, 0x20), PUB_8_Y)
            s :=  calldataload(add(input, 256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_9_X)
            mstore(add(g, 0x20), PUB_9_Y)
            s :=  calldataload(add(input, 288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_10_X)
            mstore(add(g, 0x20), PUB_10_Y)
            s :=  calldataload(add(input, 320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_11_X)
            mstore(add(g, 0x20), PUB_11_Y)
            s :=  calldataload(add(input, 352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_12_X)
            mstore(add(g, 0x20), PUB_12_Y)
            s :=  calldataload(add(input, 384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_13_X)
            mstore(add(g, 0x20), PUB_13_Y)
            s :=  calldataload(add(input, 416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_14_X)
            mstore(add(g, 0x20), PUB_14_Y)
            s :=  calldataload(add(input, 448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_15_X)
            mstore(add(g, 0x20), PUB_15_Y)
            s :=  calldataload(add(input, 480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_16_X)
            mstore(add(g, 0x20), PUB_16_Y)
            s :=  calldataload(add(input, 512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_17_X)
            mstore(add(g, 0x20), PUB_17_Y)
            s :=  calldataload(add(input, 544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_18_X)
            mstore(add(g, 0x20), PUB_18_Y)
            s :=  calldataload(add(input, 576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_19_X)
            mstore(add(g, 0x20), PUB_19_Y)
            s :=  calldataload(add(input, 608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_20_X)
            mstore(add(g, 0x20), PUB_20_Y)
            s :=  calldataload(add(input, 640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_21_X)
            mstore(add(g, 0x20), PUB_21_Y)
            s :=  calldataload(add(input, 672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_22_X)
            mstore(add(g, 0x20), PUB_22_Y)
            s :=  calldataload(add(input, 704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_23_X)
            mstore(add(g, 0x20), PUB_23_Y)
            s :=  calldataload(add(input, 736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_24_X)
            mstore(add(g, 0x20), PUB_24_Y)
            s :=  calldataload(add(input, 768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_25_X)
            mstore(add(g, 0x20), PUB_25_Y)
            s :=  calldataload(add(input, 800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_26_X)
            mstore(add(g, 0x20), PUB_26_Y)
            s :=  calldataload(add(input, 832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_27_X)
            mstore(add(g, 0x20), PUB_27_Y)
            s :=  calldataload(add(input, 864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_28_X)
            mstore(add(g, 0x20), PUB_28_Y)
            s :=  calldataload(add(input, 896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_29_X)
            mstore(add(g, 0x20), PUB_29_Y)
            s :=  calldataload(add(input, 928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_30_X)
            mstore(add(g, 0x20), PUB_30_Y)
            s :=  calldataload(add(input, 960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_31_X)
            mstore(add(g, 0x20), PUB_31_Y)
            s :=  calldataload(add(input, 992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_32_X)
            mstore(add(g, 0x20), PUB_32_Y)
            s :=  calldataload(add(input, 1024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_33_X)
            mstore(add(g, 0x20), PUB_33_Y)
            s :=  calldataload(add(input, 1056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_34_X)
            mstore(add(g, 0x20), PUB_34_Y)
            s :=  calldataload(add(input, 1088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_35_X)
            mstore(add(g, 0x20), PUB_35_Y)
            s :=  calldataload(add(input, 1120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_36_X)
            mstore(add(g, 0x20), PUB_36_Y)
            s :=  calldataload(add(input, 1152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_37_X)
            mstore(add(g, 0x20), PUB_37_Y)
            s :=  calldataload(add(input, 1184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_38_X)
            mstore(add(g, 0x20), PUB_38_Y)
            s :=  calldataload(add(input, 1216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_39_X)
            mstore(add(g, 0x20), PUB_39_Y)
            s :=  calldataload(add(input, 1248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_40_X)
            mstore(add(g, 0x20), PUB_40_Y)
            s :=  calldataload(add(input, 1280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_41_X)
            mstore(add(g, 0x20), PUB_41_Y)
            s :=  calldataload(add(input, 1312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_42_X)
            mstore(add(g, 0x20), PUB_42_Y)
            s :=  calldataload(add(input, 1344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_43_X)
            mstore(add(g, 0x20), PUB_43_Y)
            s :=  calldataload(add(input, 1376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_44_X)
            mstore(add(g, 0x20), PUB_44_Y)
            s :=  calldataload(add(input, 1408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_45_X)
            mstore(add(g, 0x20), PUB_45_Y)
            s :=  calldataload(add(input, 1440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_46_X)
            mstore(add(g, 0x20), PUB_46_Y)
            s :=  calldataload(add(input, 1472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_47_X)
            mstore(add(g, 0x20), PUB_47_Y)
            s :=  calldataload(add(input, 1504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_48_X)
            mstore(add(g, 0x20), PUB_48_Y)
            s :=  calldataload(add(input, 1536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_49_X)
            mstore(add(g, 0x20), PUB_49_Y)
            s :=  calldataload(add(input, 1568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_50_X)
            mstore(add(g, 0x20), PUB_50_Y)
            s :=  calldataload(add(input, 1600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_51_X)
            mstore(add(g, 0x20), PUB_51_Y)
            s :=  calldataload(add(input, 1632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_52_X)
            mstore(add(g, 0x20), PUB_52_Y)
            s :=  calldataload(add(input, 1664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_53_X)
            mstore(add(g, 0x20), PUB_53_Y)
            s :=  calldataload(add(input, 1696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_54_X)
            mstore(add(g, 0x20), PUB_54_Y)
            s :=  calldataload(add(input, 1728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_55_X)
            mstore(add(g, 0x20), PUB_55_Y)
            s :=  calldataload(add(input, 1760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_56_X)
            mstore(add(g, 0x20), PUB_56_Y)
            s :=  calldataload(add(input, 1792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_57_X)
            mstore(add(g, 0x20), PUB_57_Y)
            s :=  calldataload(add(input, 1824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_58_X)
            mstore(add(g, 0x20), PUB_58_Y)
            s :=  calldataload(add(input, 1856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_59_X)
            mstore(add(g, 0x20), PUB_59_Y)
            s :=  calldataload(add(input, 1888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_60_X)
            mstore(add(g, 0x20), PUB_60_Y)
            s :=  calldataload(add(input, 1920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_61_X)
            mstore(add(g, 0x20), PUB_61_Y)
            s :=  calldataload(add(input, 1952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_62_X)
            mstore(add(g, 0x20), PUB_62_Y)
            s :=  calldataload(add(input, 1984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_63_X)
            mstore(add(g, 0x20), PUB_63_Y)
            s :=  calldataload(add(input, 2016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_64_X)
            mstore(add(g, 0x20), PUB_64_Y)
            s :=  calldataload(add(input, 2048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_65_X)
            mstore(add(g, 0x20), PUB_65_Y)
            s :=  calldataload(add(input, 2080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_66_X)
            mstore(add(g, 0x20), PUB_66_Y)
            s :=  calldataload(add(input, 2112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_67_X)
            mstore(add(g, 0x20), PUB_67_Y)
            s :=  calldataload(add(input, 2144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_68_X)
            mstore(add(g, 0x20), PUB_68_Y)
            s :=  calldataload(add(input, 2176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_69_X)
            mstore(add(g, 0x20), PUB_69_Y)
            s :=  calldataload(add(input, 2208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_70_X)
            mstore(add(g, 0x20), PUB_70_Y)
            s :=  calldataload(add(input, 2240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_71_X)
            mstore(add(g, 0x20), PUB_71_Y)
            s :=  calldataload(add(input, 2272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_72_X)
            mstore(add(g, 0x20), PUB_72_Y)
            s :=  calldataload(add(input, 2304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_73_X)
            mstore(add(g, 0x20), PUB_73_Y)
            s :=  calldataload(add(input, 2336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_74_X)
            mstore(add(g, 0x20), PUB_74_Y)
            s :=  calldataload(add(input, 2368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_75_X)
            mstore(add(g, 0x20), PUB_75_Y)
            s :=  calldataload(add(input, 2400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_76_X)
            mstore(add(g, 0x20), PUB_76_Y)
            s :=  calldataload(add(input, 2432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_77_X)
            mstore(add(g, 0x20), PUB_77_Y)
            s :=  calldataload(add(input, 2464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_78_X)
            mstore(add(g, 0x20), PUB_78_Y)
            s :=  calldataload(add(input, 2496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_79_X)
            mstore(add(g, 0x20), PUB_79_Y)
            s :=  calldataload(add(input, 2528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_80_X)
            mstore(add(g, 0x20), PUB_80_Y)
            s :=  calldataload(add(input, 2560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_81_X)
            mstore(add(g, 0x20), PUB_81_Y)
            s :=  calldataload(add(input, 2592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_82_X)
            mstore(add(g, 0x20), PUB_82_Y)
            s :=  calldataload(add(input, 2624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_83_X)
            mstore(add(g, 0x20), PUB_83_Y)
            s :=  calldataload(add(input, 2656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_84_X)
            mstore(add(g, 0x20), PUB_84_Y)
            s :=  calldataload(add(input, 2688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_85_X)
            mstore(add(g, 0x20), PUB_85_Y)
            s :=  calldataload(add(input, 2720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_86_X)
            mstore(add(g, 0x20), PUB_86_Y)
            s :=  calldataload(add(input, 2752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_87_X)
            mstore(add(g, 0x20), PUB_87_Y)
            s :=  calldataload(add(input, 2784))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_88_X)
            mstore(add(g, 0x20), PUB_88_Y)
            s :=  calldataload(add(input, 2816))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_89_X)
            mstore(add(g, 0x20), PUB_89_Y)
            s :=  calldataload(add(input, 2848))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_90_X)
            mstore(add(g, 0x20), PUB_90_Y)
            s :=  calldataload(add(input, 2880))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_91_X)
            mstore(add(g, 0x20), PUB_91_Y)
            s :=  calldataload(add(input, 2912))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_92_X)
            mstore(add(g, 0x20), PUB_92_Y)
            s :=  calldataload(add(input, 2944))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_93_X)
            mstore(add(g, 0x20), PUB_93_Y)
            s :=  calldataload(add(input, 2976))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_94_X)
            mstore(add(g, 0x20), PUB_94_Y)
            s :=  calldataload(add(input, 3008))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_95_X)
            mstore(add(g, 0x20), PUB_95_Y)
            s :=  calldataload(add(input, 3040))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_96_X)
            mstore(add(g, 0x20), PUB_96_Y)
            s :=  calldataload(add(input, 3072))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_97_X)
            mstore(add(g, 0x20), PUB_97_Y)
            s :=  calldataload(add(input, 3104))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_98_X)
            mstore(add(g, 0x20), PUB_98_Y)
            s :=  calldataload(add(input, 3136))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_99_X)
            mstore(add(g, 0x20), PUB_99_Y)
            s :=  calldataload(add(input, 3168))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_100_X)
            mstore(add(g, 0x20), PUB_100_Y)
            s :=  calldataload(add(input, 3200))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_101_X)
            mstore(add(g, 0x20), PUB_101_Y)
            s :=  calldataload(add(input, 3232))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_102_X)
            mstore(add(g, 0x20), PUB_102_Y)
            s :=  calldataload(add(input, 3264))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_103_X)
            mstore(add(g, 0x20), PUB_103_Y)
            s :=  calldataload(add(input, 3296))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_104_X)
            mstore(add(g, 0x20), PUB_104_Y)
            s :=  calldataload(add(input, 3328))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_105_X)
            mstore(add(g, 0x20), PUB_105_Y)
            s :=  calldataload(add(input, 3360))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_106_X)
            mstore(add(g, 0x20), PUB_106_Y)
            s :=  calldataload(add(input, 3392))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_107_X)
            mstore(add(g, 0x20), PUB_107_Y)
            s :=  calldataload(add(input, 3424))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_108_X)
            mstore(add(g, 0x20), PUB_108_Y)
            s :=  calldataload(add(input, 3456))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_109_X)
            mstore(add(g, 0x20), PUB_109_Y)
            s :=  calldataload(add(input, 3488))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_110_X)
            mstore(add(g, 0x20), PUB_110_Y)
            s :=  calldataload(add(input, 3520))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_111_X)
            mstore(add(g, 0x20), PUB_111_Y)
            s :=  calldataload(add(input, 3552))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_112_X)
            mstore(add(g, 0x20), PUB_112_Y)
            s :=  calldataload(add(input, 3584))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_113_X)
            mstore(add(g, 0x20), PUB_113_Y)
            s :=  calldataload(add(input, 3616))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_114_X)
            mstore(add(g, 0x20), PUB_114_Y)
            s :=  calldataload(add(input, 3648))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_115_X)
            mstore(add(g, 0x20), PUB_115_Y)
            s :=  calldataload(add(input, 3680))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_116_X)
            mstore(add(g, 0x20), PUB_116_Y)
            s :=  calldataload(add(input, 3712))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_117_X)
            mstore(add(g, 0x20), PUB_117_Y)
            s :=  calldataload(add(input, 3744))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_118_X)
            mstore(add(g, 0x20), PUB_118_Y)
            s :=  calldataload(add(input, 3776))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_119_X)
            mstore(add(g, 0x20), PUB_119_Y)
            s :=  calldataload(add(input, 3808))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_120_X)
            mstore(add(g, 0x20), PUB_120_Y)
            s :=  calldataload(add(input, 3840))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_121_X)
            mstore(add(g, 0x20), PUB_121_Y)
            s :=  calldataload(add(input, 3872))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_122_X)
            mstore(add(g, 0x20), PUB_122_Y)
            s :=  calldataload(add(input, 3904))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_123_X)
            mstore(add(g, 0x20), PUB_123_Y)
            s :=  calldataload(add(input, 3936))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_124_X)
            mstore(add(g, 0x20), PUB_124_Y)
            s :=  calldataload(add(input, 3968))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_125_X)
            mstore(add(g, 0x20), PUB_125_Y)
            s :=  calldataload(add(input, 4000))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_126_X)
            mstore(add(g, 0x20), PUB_126_Y)
            s :=  calldataload(add(input, 4032))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_127_X)
            mstore(add(g, 0x20), PUB_127_Y)
            s :=  calldataload(add(input, 4064))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_128_X)
            mstore(add(g, 0x20), PUB_128_Y)
            s :=  calldataload(add(input, 4096))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_129_X)
            mstore(add(g, 0x20), PUB_129_Y)
            s :=  calldataload(add(input, 4128))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_130_X)
            mstore(add(g, 0x20), PUB_130_Y)
            s :=  calldataload(add(input, 4160))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_131_X)
            mstore(add(g, 0x20), PUB_131_Y)
            s :=  calldataload(add(input, 4192))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_132_X)
            mstore(add(g, 0x20), PUB_132_Y)
            s :=  calldataload(add(input, 4224))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_133_X)
            mstore(add(g, 0x20), PUB_133_Y)
            s :=  calldataload(add(input, 4256))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_134_X)
            mstore(add(g, 0x20), PUB_134_Y)
            s :=  calldataload(add(input, 4288))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_135_X)
            mstore(add(g, 0x20), PUB_135_Y)
            s :=  calldataload(add(input, 4320))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_136_X)
            mstore(add(g, 0x20), PUB_136_Y)
            s :=  calldataload(add(input, 4352))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_137_X)
            mstore(add(g, 0x20), PUB_137_Y)
            s :=  calldataload(add(input, 4384))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_138_X)
            mstore(add(g, 0x20), PUB_138_Y)
            s :=  calldataload(add(input, 4416))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_139_X)
            mstore(add(g, 0x20), PUB_139_Y)
            s :=  calldataload(add(input, 4448))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_140_X)
            mstore(add(g, 0x20), PUB_140_Y)
            s :=  calldataload(add(input, 4480))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_141_X)
            mstore(add(g, 0x20), PUB_141_Y)
            s :=  calldataload(add(input, 4512))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_142_X)
            mstore(add(g, 0x20), PUB_142_Y)
            s :=  calldataload(add(input, 4544))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_143_X)
            mstore(add(g, 0x20), PUB_143_Y)
            s :=  calldataload(add(input, 4576))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_144_X)
            mstore(add(g, 0x20), PUB_144_Y)
            s :=  calldataload(add(input, 4608))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_145_X)
            mstore(add(g, 0x20), PUB_145_Y)
            s :=  calldataload(add(input, 4640))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_146_X)
            mstore(add(g, 0x20), PUB_146_Y)
            s :=  calldataload(add(input, 4672))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_147_X)
            mstore(add(g, 0x20), PUB_147_Y)
            s :=  calldataload(add(input, 4704))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_148_X)
            mstore(add(g, 0x20), PUB_148_Y)
            s :=  calldataload(add(input, 4736))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_149_X)
            mstore(add(g, 0x20), PUB_149_Y)
            s :=  calldataload(add(input, 4768))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_150_X)
            mstore(add(g, 0x20), PUB_150_Y)
            s :=  calldataload(add(input, 4800))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_151_X)
            mstore(add(g, 0x20), PUB_151_Y)
            s :=  calldataload(add(input, 4832))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_152_X)
            mstore(add(g, 0x20), PUB_152_Y)
            s :=  calldataload(add(input, 4864))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_153_X)
            mstore(add(g, 0x20), PUB_153_Y)
            s :=  calldataload(add(input, 4896))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_154_X)
            mstore(add(g, 0x20), PUB_154_Y)
            s :=  calldataload(add(input, 4928))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_155_X)
            mstore(add(g, 0x20), PUB_155_Y)
            s :=  calldataload(add(input, 4960))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_156_X)
            mstore(add(g, 0x20), PUB_156_Y)
            s :=  calldataload(add(input, 4992))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_157_X)
            mstore(add(g, 0x20), PUB_157_Y)
            s :=  calldataload(add(input, 5024))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_158_X)
            mstore(add(g, 0x20), PUB_158_Y)
            s :=  calldataload(add(input, 5056))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_159_X)
            mstore(add(g, 0x20), PUB_159_Y)
            s :=  calldataload(add(input, 5088))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_160_X)
            mstore(add(g, 0x20), PUB_160_Y)
            s :=  calldataload(add(input, 5120))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_161_X)
            mstore(add(g, 0x20), PUB_161_Y)
            s :=  calldataload(add(input, 5152))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_162_X)
            mstore(add(g, 0x20), PUB_162_Y)
            s :=  calldataload(add(input, 5184))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_163_X)
            mstore(add(g, 0x20), PUB_163_Y)
            s :=  calldataload(add(input, 5216))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_164_X)
            mstore(add(g, 0x20), PUB_164_Y)
            s :=  calldataload(add(input, 5248))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_165_X)
            mstore(add(g, 0x20), PUB_165_Y)
            s :=  calldataload(add(input, 5280))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_166_X)
            mstore(add(g, 0x20), PUB_166_Y)
            s :=  calldataload(add(input, 5312))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_167_X)
            mstore(add(g, 0x20), PUB_167_Y)
            s :=  calldataload(add(input, 5344))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_168_X)
            mstore(add(g, 0x20), PUB_168_Y)
            s :=  calldataload(add(input, 5376))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_169_X)
            mstore(add(g, 0x20), PUB_169_Y)
            s :=  calldataload(add(input, 5408))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_170_X)
            mstore(add(g, 0x20), PUB_170_Y)
            s :=  calldataload(add(input, 5440))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_171_X)
            mstore(add(g, 0x20), PUB_171_Y)
            s :=  calldataload(add(input, 5472))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_172_X)
            mstore(add(g, 0x20), PUB_172_Y)
            s :=  calldataload(add(input, 5504))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_173_X)
            mstore(add(g, 0x20), PUB_173_Y)
            s :=  calldataload(add(input, 5536))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_174_X)
            mstore(add(g, 0x20), PUB_174_Y)
            s :=  calldataload(add(input, 5568))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_175_X)
            mstore(add(g, 0x20), PUB_175_Y)
            s :=  calldataload(add(input, 5600))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_176_X)
            mstore(add(g, 0x20), PUB_176_Y)
            s :=  calldataload(add(input, 5632))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_177_X)
            mstore(add(g, 0x20), PUB_177_Y)
            s :=  calldataload(add(input, 5664))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_178_X)
            mstore(add(g, 0x20), PUB_178_Y)
            s :=  calldataload(add(input, 5696))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_179_X)
            mstore(add(g, 0x20), PUB_179_Y)
            s :=  calldataload(add(input, 5728))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_180_X)
            mstore(add(g, 0x20), PUB_180_Y)
            s :=  calldataload(add(input, 5760))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_181_X)
            mstore(add(g, 0x20), PUB_181_Y)
            s :=  calldataload(add(input, 5792))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_182_X)
            mstore(add(g, 0x20), PUB_182_Y)
            s :=  calldataload(add(input, 5824))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_183_X)
            mstore(add(g, 0x20), PUB_183_Y)
            s :=  calldataload(add(input, 5856))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_184_X)
            mstore(add(g, 0x20), PUB_184_Y)
            s :=  calldataload(add(input, 5888))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_185_X)
            mstore(add(g, 0x20), PUB_185_Y)
            s :=  calldataload(add(input, 5920))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_186_X)
            mstore(add(g, 0x20), PUB_186_Y)
            s :=  calldataload(add(input, 5952))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_187_X)
            mstore(add(g, 0x20), PUB_187_Y)
            s :=  calldataload(add(input, 5984))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_188_X)
            mstore(add(g, 0x20), PUB_188_Y)
            s :=  calldataload(add(input, 6016))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_189_X)
            mstore(add(g, 0x20), PUB_189_Y)
            s :=  calldataload(add(input, 6048))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_190_X)
            mstore(add(g, 0x20), PUB_190_Y)
            s :=  calldataload(add(input, 6080))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_191_X)
            mstore(add(g, 0x20), PUB_191_Y)
            s :=  calldataload(add(input, 6112))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_192_X)
            mstore(add(g, 0x20), PUB_192_Y)
            s :=  calldataload(add(input, 6144))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_193_X)
            mstore(add(g, 0x20), PUB_193_Y)
            s :=  calldataload(add(input, 6176))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_194_X)
            mstore(add(g, 0x20), PUB_194_Y)
            s :=  calldataload(add(input, 6208))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_195_X)
            mstore(add(g, 0x20), PUB_195_Y)
            s :=  calldataload(add(input, 6240))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_196_X)
            mstore(add(g, 0x20), PUB_196_Y)
            s :=  calldataload(add(input, 6272))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_197_X)
            mstore(add(g, 0x20), PUB_197_Y)
            s :=  calldataload(add(input, 6304))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_198_X)
            mstore(add(g, 0x20), PUB_198_Y)
            s :=  calldataload(add(input, 6336))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_199_X)
            mstore(add(g, 0x20), PUB_199_Y)
            s :=  calldataload(add(input, 6368))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_200_X)
            mstore(add(g, 0x20), PUB_200_Y)
            s :=  calldataload(add(input, 6400))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_201_X)
            mstore(add(g, 0x20), PUB_201_Y)
            s :=  calldataload(add(input, 6432))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_202_X)
            mstore(add(g, 0x20), PUB_202_Y)
            s :=  calldataload(add(input, 6464))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_203_X)
            mstore(add(g, 0x20), PUB_203_Y)
            s :=  calldataload(add(input, 6496))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_204_X)
            mstore(add(g, 0x20), PUB_204_Y)
            s :=  calldataload(add(input, 6528))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_205_X)
            mstore(add(g, 0x20), PUB_205_Y)
            s :=  calldataload(add(input, 6560))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_206_X)
            mstore(add(g, 0x20), PUB_206_Y)
            s :=  calldataload(add(input, 6592))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_207_X)
            mstore(add(g, 0x20), PUB_207_Y)
            s :=  calldataload(add(input, 6624))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_208_X)
            mstore(add(g, 0x20), PUB_208_Y)
            s :=  calldataload(add(input, 6656))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_209_X)
            mstore(add(g, 0x20), PUB_209_Y)
            s :=  calldataload(add(input, 6688))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_210_X)
            mstore(add(g, 0x20), PUB_210_Y)
            s :=  calldataload(add(input, 6720))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            mstore(g, PUB_211_X)
            mstore(add(g, 0x20), PUB_211_Y)
            s :=  calldataload(add(input, 6752))
            mstore(add(g, 0x40), s)
            success := and(success, lt(s, R))
            success := and(success, staticcall(gas(), PRECOMPILE_MUL, g, 0x60, g, 0x40))
            success := and(success, staticcall(gas(), PRECOMPILE_ADD, f, 0x80, f, 0x40))
            x := mload(f)
            y := mload(add(f, 0x20))
        }
        if (!success) {
            // Either Public input not in field, or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert PublicInputNotInField();
        }
    }

    /// Compress a proof.
    /// @notice Will revert with InvalidProof if the curve points are invalid,
    /// but does not verify the proof itself.
    /// @param proof The uncompressed Groth16 proof. Elements are in the same order as for
    /// verifyProof. I.e. Groth16 points (A, B, C) encoded as in EIP-197.
    /// @return compressed The compressed proof. Elements are in the same order as for
    /// verifyCompressedProof. I.e. points (A, B, C) in compressed format.
    function compressProof(uint256[8] calldata proof)
    public view returns (uint256[4] memory compressed) {
        compressed[0] = compress_g1(proof[0], proof[1]);
        (compressed[2], compressed[1]) = compress_g2(proof[3], proof[2], proof[5], proof[4]);
        compressed[3] = compress_g1(proof[6], proof[7]);
    }

    /// Verify a Groth16 proof with compressed points.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param compressedProof the points (A, B, C) in compressed format
    /// matching the output of compressProof.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyCompressedProof(
        uint256[4] calldata compressedProof,
        uint256[212] calldata input
    ) public view {
        (uint256 Ax, uint256 Ay) = decompress_g1(compressedProof[0]);
        (uint256 Bx0, uint256 Bx1, uint256 By0, uint256 By1) = decompress_g2(
                compressedProof[2], compressedProof[1]);
        (uint256 Cx, uint256 Cy) = decompress_g1(compressedProof[3]);
        (uint256 Lx, uint256 Ly) = publicInputMSM(input);

        // Verify the pairing
        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        uint256[24] memory pairings;
        // e(A, B)
        pairings[ 0] = Ax;
        pairings[ 1] = Ay;
        pairings[ 2] = Bx1;
        pairings[ 3] = Bx0;
        pairings[ 4] = By1;
        pairings[ 5] = By0;
        // e(C, -δ)
        pairings[ 6] = Cx;
        pairings[ 7] = Cy;
        pairings[ 8] = DELTA_NEG_X_1;
        pairings[ 9] = DELTA_NEG_X_0;
        pairings[10] = DELTA_NEG_Y_1;
        pairings[11] = DELTA_NEG_Y_0;
        // e(α, -β)
        pairings[12] = ALPHA_X;
        pairings[13] = ALPHA_Y;
        pairings[14] = BETA_NEG_X_1;
        pairings[15] = BETA_NEG_X_0;
        pairings[16] = BETA_NEG_Y_1;
        pairings[17] = BETA_NEG_Y_0;
        // e(L_pub, -γ)
        pairings[18] = Lx;
        pairings[19] = Ly;
        pairings[20] = GAMMA_NEG_X_1;
        pairings[21] = GAMMA_NEG_X_0;
        pairings[22] = GAMMA_NEG_Y_1;
        pairings[23] = GAMMA_NEG_Y_0;

        // Check pairing equation.
        bool success;
        uint256[1] memory output;
        assembly ("memory-safe") {
            success := staticcall(gas(), PRECOMPILE_VERIFY, pairings, 0x300, output, 0x20)
        }
        if (!success || output[0] != 1) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }

    /// Verify an uncompressed Groth16 proof.
    /// @notice Reverts with InvalidProof if the proof is invalid or
    /// with PublicInputNotInField the public input is not reduced.
    /// @notice There is no return value. If the function does not revert, the
    /// proof was successfully verified.
    /// @param proof the points (A, B, C) in EIP-197 format matching the output
    /// of compressProof.
    /// @param input the public input field elements in the scalar field Fr.
    /// Elements must be reduced.
    function verifyProof(
        uint256[8] calldata proof,
        uint256[212] calldata input
    ) public view {
        (uint256 x, uint256 y) = publicInputMSM(input);

        // Note: The precompile expects the F2 coefficients in big-endian order.
        // Note: The pairing precompile rejects unreduced values, so we won't check that here.
        
        bool success;
        assembly ("memory-safe") {
            let f := mload(0x40) // Free memory pointer.

            // Copy points (A, B, C) to memory. They are already in correct encoding.
            // This is pairing e(A, B) and G1 of e(C, -δ).
            calldatacopy(f, proof, 0x100)

            // Complete e(C, -δ) and write e(α, -β), e(L_pub, -γ) to memory.
            // OPT: This could be better done using a single codecopy, but
            //      Solidity (unlike standalone Yul) doesn't provide a way to
            //      to do this.
            mstore(add(f, 0x100), DELTA_NEG_X_1)
            mstore(add(f, 0x120), DELTA_NEG_X_0)
            mstore(add(f, 0x140), DELTA_NEG_Y_1)
            mstore(add(f, 0x160), DELTA_NEG_Y_0)
            mstore(add(f, 0x180), ALPHA_X)
            mstore(add(f, 0x1a0), ALPHA_Y)
            mstore(add(f, 0x1c0), BETA_NEG_X_1)
            mstore(add(f, 0x1e0), BETA_NEG_X_0)
            mstore(add(f, 0x200), BETA_NEG_Y_1)
            mstore(add(f, 0x220), BETA_NEG_Y_0)
            mstore(add(f, 0x240), x)
            mstore(add(f, 0x260), y)
            mstore(add(f, 0x280), GAMMA_NEG_X_1)
            mstore(add(f, 0x2a0), GAMMA_NEG_X_0)
            mstore(add(f, 0x2c0), GAMMA_NEG_Y_1)
            mstore(add(f, 0x2e0), GAMMA_NEG_Y_0)

            // Check pairing equation.
            success := staticcall(gas(), PRECOMPILE_VERIFY, f, 0x300, f, 0x20)
            // Also check returned value (both are either 1 or 0).
            success := and(success, mload(f))
        }
        if (!success) {
            // Either proof or verification key invalid.
            // We assume the contract is correctly generated, so the verification key is valid.
            revert ProofInvalid();
        }
    }
}
